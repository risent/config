;; Object linux-2.6.30-gentoo-r5/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "linux-2.6.30-gentoo-r5/"
  :tables (list 
   (semanticdb-table "Makefile"
    :major-mode 'makefile-gmake-mode
    :tags 
        '( ("VERSION" variable (:default-value ("2")) nil [1 13])
            ("PATCHLEVEL" variable (:default-value ("6")) nil [13 28])
            ("SUBLEVEL" variable (:default-value ("30")) nil [28 42])
            ("EXTRAVERSION" variable (:default-value ("-gentoo-r5")) nil [42 68])
            ("NAME" variable (:default-value ("Man-Eating" "Seals" "of" "Antiquity")) nil [68 105])
            ("MAKEFLAGS" variable (:default-value ("-rR" "--no-print-directory")) nil [509 547])
            ("PHONY" variable (:default-value ("_all")) nil [3329 3343])
            ("_all" function nil nil [3343 3349])
            ("$(CURDIR)" function (:arguments (";")) nil [3390 3421])
            ("Makefile" function (:arguments (";")) nil [3390 3421])
            ("saved-output" variable (:default-value ("$(KBUILD_OUTPUT)")) nil [3573 3606])
            ("KBUILD_OUTPUT" variable (:default-value ("$(shell cd $(KBUILD_OUTPUT) && /bin/pwd)")) nil [3606 3664])
            ("PHONY" variable (:default-value ("$(MAKECMDGOALS)" "sub-make")) nil [3756 3790])
            ("$(filter-out _all sub-make $(CURDIR)/Makefile, $(MAKECMDGOALS))" function (:arguments ("sub-make")) nil [3791 3878])
            ("_all" function (:arguments ("sub-make")) nil [3791 3878])
            ("sub-make" function (:arguments ("FORCE")) nil [3879 4081])
            ("skip-makefile" variable (:default-value ("1")) nil [4129 4148])
            ("PHONY" variable (:default-value ("all")) nil [4422 4435])
            ("_all" function (:arguments ("all")) nil [4460 4470])
            ("_all" function (:arguments ("modules")) nil [4475 4489])
            ("srctree" variable (:default-value ("$(if $(KBUILD_SRC),$(KBUILD_SRC),$(CURDIR))")) nil [4496 4552])
            ("TOPDIR" variable (:default-value ("$(srctree)")) nil [4552 4574])
            ("objtree" variable (:default-value ("$(CURDIR)")) nil [4624 4646])
            ("src" variable (:default-value ("$(srctree)")) nil [4646 4665])
            ("obj" variable (:default-value ("$(objtree)")) nil [4665 4684])
            ("VPATH" variable (:default-value ("$(srctree)$(if $(KBUILD_EXTMOD),:$(KBUILD_EXTMOD))")) nil [4685 4746])
            ("SUBARCH" variable (:default-value ("$(shell uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc64/ \\
				  -e s/arm.*/arm/ -e s/sa110/arm/ \\
				  -e s/s390x/s390/ -e s/parisc64/parisc/ \\
				  -e s/ppc.*/powerpc/ -e s/mips.*/mips/ \\
				  -e s/sh[234].*/sh/ )")) nil [5122 5354])
            ("export" function (:arguments ("=" "$(SUBARCH)")) nil [6259 6297])
            ("KBUILD_BUILDHOST" function (:arguments ("=" "$(SUBARCH)")) nil [6259 6297])
            ("UTS_MACHINE" variable (:default-value ("$(ARCH)")) nil [6374 6398])
            ("SRCARCH" variable (:default-value ("$(ARCH)")) nil [6398 6418])
            ("hdr-arch" variable (:default-value ("$(SRCARCH)")) nil [6768 6792])
            ("CONFIG_SHELL" variable (:default-value ("$(shell if [ -x \"$$BASH\" ]; then echo $$BASH; \\
	  else if [ -x /bin/bash ]; then echo /bin/bash; \\
	  else echo sh; fi ; fi)")) nil [6900 7042])
            ("HOSTCC" variable (:default-value ("gcc")) nil [7043 7062])
            ("HOSTCXX" variable (:default-value ("g++")) nil [7062 7081])
            ("HOSTCFLAGS" variable (:default-value ("-Wall" "-Wstrict-prototypes" "-O2" "-fomit-frame-pointer")) nil [7081 7147])
            ("HOSTCXXFLAGS" variable (:default-value ("-O2")) nil [7147 7166])
            ("KBUILD_MODULES" variable nil nil [7252 7270])
            ("KBUILD_BUILTIN" variable (:default-value ("1")) nil [7270 7290])
            ("MAKEFLAGS" variable (:default-value ("--include-dir=$(srctree)")) nil [9256 9294])
            ("$(srctree)" function (:arguments (";")) nil [9363 9400])
            ("$(srctree)/scripts/Kbuild.include" include nil nil [9400 9442])
            ("AS" variable (:default-value ("$(CROSS_COMPILE)as")) nil [9474 9499])
            ("LD" variable (:default-value ("$(CROSS_COMPILE)ld")) nil [9499 9524])
            ("CC" variable (:default-value ("$(CROSS_COMPILE)gcc")) nil [9524 9550])
            ("CPP" variable (:default-value ("$(CC)" "-E")) nil [9550 9566])
            ("AR" variable (:default-value ("$(CROSS_COMPILE)ar")) nil [9566 9591])
            ("NM" variable (:default-value ("$(CROSS_COMPILE)nm")) nil [9591 9616])
            ("STRIP" variable (:default-value ("$(CROSS_COMPILE)strip")) nil [9616 9647])
            ("OBJCOPY" variable (:default-value ("$(CROSS_COMPILE)objcopy")) nil [9647 9682])
            ("OBJDUMP" variable (:default-value ("$(CROSS_COMPILE)objdump")) nil [9682 9717])
            ("AWK" variable (:default-value ("awk")) nil [9717 9728])
            ("GENKSYMS" variable (:default-value ("scripts/genksyms/genksyms")) nil [9728 9765])
            ("DEPMOD" variable (:default-value ("/sbin/depmod")) nil [9765 9788])
            ("KALLSYMS" variable (:default-value ("scripts/kallsyms")) nil [9788 9816])
            ("PERL" variable (:default-value ("perl")) nil [9816 9829])
            ("CHECK" variable (:default-value ("sparse")) nil [9829 9845])
            ("CHECKFLAGS" variable (:default-value ("-D__linux__" "-Dlinux" "-D__STDC__" "-Dunix" "-D__unix__" "-Wbitwise" "-Wno-return-void" "$(CF)")) nil [9846 9952])
            ("MODFLAGS" variable (:default-value ("-DMODULE")) nil [9952 9972])
            ("CFLAGS_MODULE" variable (:default-value ("$(MODFLAGS)")) nil [9972 10002])
            ("AFLAGS_MODULE" variable (:default-value ("$(MODFLAGS)")) nil [10002 10032])
            ("LDFLAGS_MODULE" variable nil nil [10032 10050])
            ("CFLAGS_KERNEL" variable nil nil [10050 10066])
            ("AFLAGS_KERNEL" variable nil nil [10066 10082])
            ("LINUXINCLUDE" variable (:default-value ("-Iinclude" "$(if $(KBUILD_SRC),-Iinclude2 -I$(srctree)/include)" "-I$(srctree)/arch/$(hdr-arch)/include" "-include" "include/linux/autoconf.h")) nil [10196 10426])
            ("KBUILD_CPPFLAGS" variable (:default-value ("-D__KERNEL__")) nil [10427 10459])
            ("KBUILD_CFLAGS" variable (:default-value ("-Wall" "-Wundef" "-Wstrict-prototypes" "-Wno-trigraphs" "-fno-strict-aliasing" "-fno-common" "-Werror-implicit-function-declaration" "-fno-delete-null-pointer-checks")) nil [10460 10652])
            ("KBUILD_AFLAGS" variable (:default-value ("-D__ASSEMBLY__")) nil [10652 10686])
            ("KERNELRELEASE" variable (:default-value ("$(shell cat include/config/kernel.release 2> /dev/null)")) nil [10758 10830])
            ("KERNELVERSION" variable (:default-value ("$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)")) nil [10830 10898])
            ("export" function (:arguments ("=" "$(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions")) nil [11490 11577])
            ("MODVERDIR" function (:arguments ("=" "$(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions")) nil [11490 11577])
            ("RCS_FIND_IGNORE" variable (:default-value ("\\( -name SCCS -o -name BitKeeper -o -name .svn -o -name CVS -o -name .pc -o -name .hg -o -name .git \\)" "-prune" "-o")) nil [11620 11752])
            ("export" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [11752 11884])
            ("RCS_TAR_IGNORE" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [11752 11884])
            ("PHONY" variable (:default-value ("scripts_basic")) nil [12055 12078])
            ("scripts_basic" function nil nil [12078 12129])
            ("scripts/basic/%" function (:arguments ("scripts_basic" ";")) nil [12196 12229])
            ("PHONY" variable (:default-value ("outputmakefile")) nil [12230 12254])
            ("outputmakefile" function nil nil [12419 12435])
            ("no-dot-config-targets" variable (:default-value ("clean" "mrproper" "distclean" "cscope" "TAGS" "tags" "help" "%docs" "check%" "include/linux/version.h" "headers_%" "kernelrelease" "kernelversion")) nil [13033 13198])
            ("config-targets" variable (:default-value ("0")) nil [13199 13219])
            ("mixed-targets" variable (:default-value ("0")) nil [13219 13239])
            ("dot-config" variable (:default-value ("1")) nil [13239 13259])
            ("%" function (:arguments ("FORCE")) nil [13887 13939])
            ("$(srctree)/arch/$(SRCARCH)/Makefile" include nil nil [14336 14380])
            ("config" function (:arguments ("scripts_basic" "outputmakefile" "FORCE")) nil [14420 14547])
            ("%config" function (:arguments ("scripts_basic" "outputmakefile" "FORCE")) nil [14548 14676])
            ("PHONY" variable (:default-value ("scripts")) nil [15053 15070])
            ("scripts" function (:arguments ("scripts_basic" "include/config/auto.conf")) nil [15070 15145])
            ("init-y" variable (:default-value ("init/")) nil [15209 15226])
            ("drivers-y" variable (:default-value ("drivers/" "sound/" "firmware/")) nil [15226 15265])
            ("net-y" variable (:default-value ("net/")) nil [15265 15280])
            ("libs-y" variable (:default-value ("lib/")) nil [15280 15296])
            ("core-y" variable (:default-value ("usr/")) nil [15296 15312])
            ("$(KCONFIG_CONFIG)" function (:arguments (";")) nil [15639 15689])
            ("include/config/auto.conf.cmd" function (:arguments (";")) nil [15639 15689])
            ("include/config/auto.conf" function (:arguments ("$(KCONFIG_CONFIG)" "include/config/auto.conf.cmd")) nil [15947 16072])
            ("PHONY" variable (:default-value ("include/config/auto.conf")) nil [16232 16266])
            ("include/config/auto.conf" function nil nil [16267 16593])
            ("include/config/auto.conf" function (:arguments (";")) nil [16674 16702])
            ("all" function (:arguments ("vmlinux")) nil [16951 16964])
            ("KBUILD_CFLAGS" variable (:default-value ("-Os")) nil [16999 17020])
            ("KBUILD_CFLAGS" variable (:default-value ("-O2")) nil [17025 17046])
            ("$(srctree)/arch/$(SRCARCH)/Makefile" include nil nil [17053 17097])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Wframe-larger-than=${CONFIG_FRAME_WARN})")) nil [17129 17205])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option, -fno-stack-protector)")) nil [17303 17360])
            ("KBUILD_CFLAGS" variable (:default-value ("-fno-omit-frame-pointer" "-fno-optimize-sibling-calls")) nil [17394 17463])
            ("KBUILD_CFLAGS" variable (:default-value ("-fomit-frame-pointer")) nil [17468 17506])
            ("KBUILD_CFLAGS" variable (:default-value ("-g")) nil [17537 17557])
            ("KBUILD_AFLAGS" variable (:default-value ("-gdwarf-2")) nil [17557 17584])
            ("KBUILD_CFLAGS" variable (:default-value ("-pg")) nil [17620 17641])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option, -fno-inline-functions-called-once)")) nil [17738 17808])
            ("NOSTDINC_FLAGS" variable (:default-value ("-nostdinc" "-isystem" "$(shell $(CC) -print-file-name=include)")) nil [17892 17969])
            ("CHECKFLAGS" variable (:default-value ("$(NOSTDINC_FLAGS)")) nil [17969 18005])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Wdeclaration-after-statement,)")) nil [18051 18117])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Wno-pointer-sign,)")) nil [18174 18228])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-fno-strict-overflow)")) nil [18296 18352])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-fno-dwarf2-cfi-asm)")) nil [18400 18455])
            ("warn-assign" variable (:default-value ("$(warning \"WARNING: Appending $$K$(1) ($(K$(1))) from $(origin K$(1)) to kernel $$$(1)\")")) nil [18558 18663])
            ("LDFLAGS_BUILD_ID" variable (:default-value ("$(patsubst -Wl$(comma)%,%,\\
			      $(call ld-option, -Wl$(comma)--build-id,))")) nil [18997 19096])
            ("LDFLAGS_MODULE" variable (:default-value ("$(LDFLAGS_BUILD_ID)")) nil [19096 19134])
            ("LDFLAGS_vmlinux" variable (:default-value ("$(LDFLAGS_BUILD_ID)")) nil [19134 19173])
            ("LDFLAGS_vmlinux" variable (:default-value ("-X")) nil [19208 19230])
            ("MODLIB" variable (:default-value ("$(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE)")) nil [19876 19934])
            ("mod_strip_cmd" variable (:default-value ("$(STRIP)" "--strip-debug")) nil [20268 20307])
            ("mod_strip_cmd" variable (:default-value ("$(STRIP)" "$(INSTALL_MOD_STRIP)")) nil [20312 20358])
            ("mod_strip_cmd" variable (:default-value ("true")) nil [20391 20412])
            ("core-y" variable (:default-value ("kernel/" "mm/" "fs/" "ipc/" "security/" "crypto/" "block/")) nil [20486 20543])
            ("vmlinux-dirs" variable (:default-value ("$(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \\
		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \\
		     $(net-y) $(net-m) $(libs-y) $(libs-m)))")) nil [20544 20713])
            ("vmlinux-alldirs" variable (:default-value ("$(sort $(vmlinux-dirs) $(patsubst %/,%,$(filter %/, \\
		     $(init-n) $(init-) \\
		     $(core-n) $(core-) $(drivers-n) $(drivers-) \\
		     $(net-n)  $(net-)  $(libs-n)    $(libs-))))")) nil [20714 20919])
            ("init-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(init-y))")) nil [20920 20971])
            ("core-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(core-y))")) nil [20971 21022])
            ("drivers-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(drivers-y))")) nil [21022 21078])
            ("net-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(net-y))")) nil [21078 21127])
            ("libs-y1" variable (:default-value ("$(patsubst %/, %/lib.a, $(libs-y))")) nil [21127 21174])
            ("libs-y2" variable (:default-value ("$(patsubst %/, %/built-in.o, $(libs-y))")) nil [21174 21226])
            ("libs-y" variable (:default-value ("$(libs-y1)" "$(libs-y2)")) nil [21226 21259])
            ("vmlinux-init" variable (:default-value ("$(head-y)" "$(init-y)")) nil [22268 22304])
            ("vmlinux-main" variable (:default-value ("$(core-y)" "$(libs-y)" "$(drivers-y)" "$(net-y)")) nil [22304 22362])
            ("vmlinux-all" variable (:default-value ("$(vmlinux-init)" "$(vmlinux-main)")) nil [22362 22410])
            ("vmlinux-lds" variable (:default-value ("arch/$(SRCARCH)/kernel/vmlinux.lds")) nil [22410 22461])
            ("export" function (:arguments ("=" "$(vmlinux-all)")) nil [22461 22506])
            ("KBUILD_VMLINUX_OBJS" function (:arguments ("=" "$(vmlinux-all)")) nil [22461 22506])
            ("quiet_cmd_vmlinux_version" variable (:default-value ("GEN" ".version")) nil [22964 23009])
            ("quiet_cmd_sysmap" variable (:default-value ("SYSMAP")) nil [23300 23326])
            ("last_kallsyms" variable (:default-value ("3")) nil [25296 25315])
            ("last_kallsyms" variable (:default-value ("2")) nil [25320 25339])
            ("kallsyms.o" variable (:default-value (".tmp_kallsyms$(last_kallsyms).o")) nil [25346 25392])
            ("cmd_ksym_ld" variable (:default-value ("$(cmd_vmlinux__)")) nil [26033 26064])
            ("quiet_cmd_kallsyms" variable (:default-value ("KSYM" "$@")) nil [26249 26281])
            (".tmp_kallsyms1.o" function (:arguments ("%.o:" "%.S" "scripts" "FORCE")) nil [26400 26506])
            (".tmp_kallsyms2.o" function (:arguments ("%.o:" "%.S" "scripts" "FORCE")) nil [26400 26506])
            (".tmp_kallsyms%.S" function (:arguments (".tmp_vmlinux%" "$(KALLSYMS)")) nil [26507 26573])
            (".tmp_vmlinux1" function (:arguments ("$(vmlinux-lds)" "$(vmlinux-all)" "FORCE")) nil [26650 26734])
            (".tmp_vmlinux2" function (:arguments ("$(vmlinux-lds)" "$(vmlinux-all)" ".tmp_kallsyms1.o" "FORCE")) nil [26735 26833])
            (".tmp_vmlinux3" function (:arguments ("$(vmlinux-lds)" "$(vmlinux-all)" ".tmp_kallsyms2.o" "FORCE")) nil [26834 26932])
            ("$(KALLSYMS)" function (:arguments ("scripts" ";")) nil [26991 27014])
            ("debug_kallsyms" function (:arguments (".tmp_map$(last_kallsyms)")) nil [27076 27117])
            (".tmp_map%" function (:arguments (".tmp_vmlinux%" "FORCE")) nil [27118 27234])
            (".tmp_map3" function (:arguments (".tmp_map2")) nil [27235 27256])
            (".tmp_map2" function (:arguments (".tmp_map1")) nil [27257 27278])
            ("quiet_cmd_vmlinux-modpost" variable (:default-value ("LD" "$@")) nil [27432 27471])
            ("vmlinux" function (:arguments ("$(vmlinux-lds)" "$(vmlinux-init)" "$(vmlinux-main)" "vmlinux.o" "$(kallsyms.o)" "FORCE")) nil [27923 28009])
            (".tmp_vmlinux1" function (:arguments ("vmlinux.o")) nil [28387 28412])
            ("modpost-init" variable (:default-value ("$(filter-out init/built-in.o, $(vmlinux-init))")) nil [28419 28482])
            ("vmlinux.o" function (:arguments ("$(modpost-init)" "$(vmlinux-main)" "FORCE")) nil [28482 28572])
            ("$(sort $(vmlinux-init) $(vmlinux-main))" function (:arguments ("$(vmlinux-dirs)" ";")) nil [28664 28738])
            ("$(vmlinux-lds)" function (:arguments ("$(vmlinux-dirs)" ";")) nil [28664 28738])
            ("PHONY" variable (:default-value ("$(vmlinux-dirs)")) nil [29023 29048])
            ("$(vmlinux-dirs)" function (:arguments ("prepare" "scripts")) nil [29048 29106])
            ("pattern" variable (:default-value ("\".*/localversion[^~]*\"")) nil [30399 30432])
            ("string" variable (:default-value ("$(shell cat /dev/null \\
	   `find $(objtree) $(srctree) -maxdepth 1 -regex $(pattern) | sort -u`)")) nil [30432 30540])
            ("localver" variable (:default-value ("$(subst $(space),, $(string) \\
			      $(patsubst \"%\",%,$(CONFIG_LOCALVERSION)))")) nil [30541 30634])
            ("localver-full" variable (:default-value ("$(localver)$(localver-auto)")) nil [31304 31348])
            ("kernelrelease" variable (:default-value ("$(KERNELVERSION)$(localver-full)")) nil [31416 31465])
            ("include/config/kernel.release" function (:arguments ("include/config/auto.conf" "FORCE")) nil [31465 31573])
            ("PHONY" variable (:default-value ("prepare" "archprepare" "prepare0" "prepare1" "prepare2" "prepare3")) nil [31919 31984])
            ("prepare3" function (:arguments ("include/config/kernel.release")) nil [32220 32260])
            ("prepare2" function (:arguments ("prepare3" "outputmakefile")) nil [32819 32853])
            ("prepare1" function (:arguments ("prepare2" "include/linux/version.h" "include/linux/utsrelease.h" "include/asm" "include/config/auto.conf")) nil [32854 33002])
            ("archprepare" function (:arguments ("prepare1" "scripts_basic")) nil [33003 33039])
            ("prepare0" function (:arguments ("archprepare" "FORCE")) nil [33040 33133])
            ("prepare" function (:arguments ("prepare0")) nil [33156 33174])
            ("include/asm" function (:arguments ("FORCE")) nil [34918 34982])
            ("uts_len" variable (:default-value ("64")) nil [35220 35234])
            ("include/linux/version.h" function (:arguments ("$(srctree)/Makefile" "FORCE")) nil [35845 35923])
            ("include/linux/utsrelease.h" function (:arguments ("include/config/kernel.release" "FORCE")) nil [35924 36018])
            ("PHONY" variable (:default-value ("headerdep")) nil [36019 36038])
            ("headerdep" function nil nil [36038 36122])
            ("PHONY" variable (:default-value ("depend" "dep")) nil [36202 36222])
            ("depend" function nil nil [36222 36284])
            ("dep" function nil nil [36222 36284])
            ("INSTALL_FW_PATH" variable (:default-value ("$(INSTALL_MOD_PATH)/lib/firmware")) nil [36382 36431])
            ("PHONY" variable (:default-value ("firmware_install")) nil [36455 36481])
            ("firmware_install" function (:arguments ("FORCE")) nil [36481 36613])
            ("hdr-inst" variable (:default-value ("-rR" "-f" "$(srctree)/scripts/Makefile.headersinst" "obj")) nil [36792 36855])
            ("hdr-dir" variable (:default-value ("$(strip                                                         \\
          $(if $(wildcard $(srctree)/arch/$(hdr-arch)/include/asm/Kbuild), \\
               arch/$(hdr-arch)/include/asm, include/asm-$(hdr-arch)))")) nil [36937 37161])
            ("hdr-dst" variable (:default-value ("$(if $(KBUILD_HEADERS), dst=include/asm-$(hdr-arch), dst=include/asm)")) nil [37220 37300])
            ("PHONY" variable (:default-value ("__headers")) nil [37301 37320])
            ("__headers" function (:arguments ("include/linux/version.h" "scripts_basic" "FORCE")) nil [37320 37421])
            ("PHONY" variable (:default-value ("headers_install_all")) nil [37422 37451])
            ("headers_install_all" function nil nil [37451 37531])
            ("PHONY" variable (:default-value ("headers_install")) nil [37532 37557])
            ("headers_install" function (:arguments ("__headers")) nil [37557 37781])
            ("PHONY" variable (:default-value ("headers_check_all")) nil [37782 37809])
            ("headers_check_all" function (:arguments ("headers_install_all")) nil [37809 37905])
            ("PHONY" variable (:default-value ("headers_check")) nil [37906 37929])
            ("headers_check" function (:arguments ("headers_install")) nil [37929 38062])
            ("all" function (:arguments ("modules")) nil [38211 38224])
            ("PHONY" variable (:default-value ("modules")) nil [38418 38435])
            ("modules" function (:arguments ("$(vmlinux-dirs)" "$(if $(KBUILD_BUILTIN),vmlinux)")) nil [38435 38761])
            ("PHONY" variable (:default-value ("modules_prepare")) nil [38809 38834])
            ("modules_prepare" function (:arguments ("prepare" "scripts")) nil [38834 38867])
            ("PHONY" variable (:default-value ("modules_install")) nil [38896 38921])
            ("modules_install" function (:arguments ("_modinst_" "_modinst_post")) nil [38921 38962])
            ("PHONY" variable (:default-value ("_modinst_")) nil [38963 38982])
            ("_modinst_" function nil nil [38982 39552])
            ("PHONY" variable (:default-value ("_modinst_post")) nil [39726 39749])
            ("_modinst_post" function (:arguments ("_modinst_")) nil [39749 39871])
            ("modules" function (:arguments ("FORCE")) nil [39999 40239])
            ("modules_install" function (:arguments ("FORCE")) nil [39999 40239])
            ("CLEAN_DIRS" variable (:default-value ("$(MODVERDIR)")) nil [40608 40636])
            ("CLEAN_FILES" variable (:default-value ("vmlinux" "System.map" ".tmp_kallsyms*" ".tmp_version" ".tmp_vmlinux*" ".tmp_System.map")) nil [40636 40746])
            ("MRPROPER_DIRS" variable (:default-value ("include/config" "include2" "usr/include" "include/generated")) nil [40798 40870])
            ("MRPROPER_FILES" variable (:default-value (".config" ".config.old" "include/asm" ".version" ".old_version" "include/linux/autoconf.h" "include/linux/version.h" "include/linux/utsrelease.h" "include/linux/bounds.h" "include/asm*/asm-offsets.h" "Module.symvers" "Module.markers" "tags" "TAGS" "cscope*")) nil [40870 41218])
            ("clean" function (:arguments ("rm-dirs" ":=" "$(CLEAN_DIRS)")) nil [41287 41320])
            ("clean" function (:arguments ("rm-files" ":=" "$(CLEAN_FILES)")) nil [41320 41354])
            ("clean-dirs" variable (:default-value ("$(addprefix _clean_,$(srctree) $(vmlinux-alldirs) Documentation)")) nil [41354 41438])
            ("PHONY" variable (:default-value ("$(clean-dirs)" "clean" "archclean")) nil [41439 41478])
            ("$(clean-dirs)" function nil nil [41478 41541])
            ("clean" function (:arguments ("archclean" "$(clean-dirs)")) nil [41542 41895])
            ("mrproper" function (:arguments ("rm-dirs" ":=" "$(wildcard $(MRPROPER_DIRS))")) nil [41957 42008])
            ("mrproper" function (:arguments ("rm-files" ":=" "$(wildcard $(MRPROPER_FILES))")) nil [42008 42060])
            ("mrproper-dirs" variable (:default-value ("$(addprefix _mrproper_,Documentation/DocBook scripts)")) nil [42060 42136])
            ("PHONY" variable (:default-value ("$(mrproper-dirs)" "mrproper" "archmrproper")) nil [42137 42185])
            ("$(mrproper-dirs)" function nil nil [42185 42254])
            ("mrproper" function (:arguments ("clean" "archmrproper" "$(mrproper-dirs)")) nil [42255 42342])
            ("PHONY" variable (:default-value ("distclean")) nil [42357 42376])
            ("distclean" function (:arguments ("mrproper")) nil [42377 42663])
            ("package-dir" variable (:default-value ("$(srctree)/scripts/package")) nil [42833 42875])
            ("%pkg" function (:arguments ("include/config/kernel.release" "FORCE")) nil [42876 42958])
            ("rpm" function (:arguments ("include/config/kernel.release" "FORCE")) nil [42958 43039])
            ("boards" variable (:default-value ("$(wildcard $(srctree)/arch/$(SRCARCH)/configs/*_defconfig)")) nil [43170 43239])
            ("boards" variable (:default-value ("$(notdir $(boards))")) nil [43239 43269])
            ("board-dirs" variable (:default-value ("$(dir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/*/*_defconfig))")) nil [43269 43351])
            ("board-dirs" variable (:default-value ("$(sort $(notdir $(board-dirs:/=)))")) nil [43351 43400])
            ("help" function nil nil [43401 46082])
            ("help-board-dirs" variable (:default-value ("$(addprefix help-,$(board-dirs))")) nil [46618 46670])
            ("help-boards" function (:arguments ("$(help-board-dirs)")) nil [46671 46703])
            ("boards-per-dir" variable (:default-value ("$(notdir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/$*/*_defconfig))")) nil [46704 46793])
            ("$(help-board-dirs)" function (:arguments ("help-%:")) nil [46794 47029])
            ("%docs" function (:arguments ("scripts_basic" "FORCE")) nil [47133 47207])
            ("KBUILD_MODULES" variable (:default-value ("1")) nil [47990 48010])
            ("PHONY" variable (:default-value ("crmodverdir")) nil [48010 48031])
            ("crmodverdir" function nil nil [48031 48064])
            ("PHONY" variable (:default-value ("$(objtree)/Module.symvers")) nil [48065 48100])
            ("$(objtree)" function nil nil [48100 48340])
            ("module-dirs" variable (:default-value ("$(addprefix _module_,$(KBUILD_EXTMOD))")) nil [48341 48395])
            ("PHONY" variable (:default-value ("$(module-dirs)" "modules")) nil [48395 48427])
            ("$(module-dirs)" function (:arguments ("crmodverdir" "$(objtree)/Module.symvers")) nil [48427 48530])
            ("modules" function (:arguments ("$(module-dirs)")) nil [48531 48650])
            ("PHONY" variable (:default-value ("modules_install")) nil [48651 48676])
            ("modules_install" function (:arguments ("_emodinst_" "_emodinst_post")) nil [48676 48719])
            ("install-dir" variable (:default-value ("$(if $(INSTALL_MOD_DIR),$(INSTALL_MOD_DIR),extra)")) nil [48720 48785])
            ("PHONY" variable (:default-value ("_emodinst_")) nil [48785 48805])
            ("_emodinst_" function nil nil [48805 48908])
            ("PHONY" variable (:default-value ("_emodinst_post")) nil [48909 48933])
            ("_emodinst_post" function (:arguments ("_emodinst_")) nil [48933 48980])
            ("clean-dirs" variable (:default-value ("$(addprefix _clean_,$(KBUILD_EXTMOD))")) nil [48981 49033])
            ("PHONY" variable (:default-value ("$(clean-dirs)" "clean")) nil [49034 49063])
            ("$(clean-dirs)" function nil nil [49063 49126])
            ("clean" function (:arguments ("rm-dirs" ":=" "$(MODVERDIR)")) nil [49127 49158])
            ("clean" function (:arguments ("rm-files" ":=" "$(KBUILD_EXTMOD)/Module.symvers" "$(KBUILD_EXTMOD)/Module.markers" "$(KBUILD_EXTMOD)/modules.order")) nil [49158 49314])
            ("clean" function (:arguments ("$(clean-dirs)")) nil [49314 49569])
            ("help" function nil nil [49570 49892])
            ("PHONY" variable (:default-value ("prepare" "scripts")) nil [49906 49931])
            ("prepare" function (:arguments (";")) nil [49931 49942])
            ("scripts" function (:arguments (";")) nil [49942 49953])
            ("quiet_cmd_tags" variable (:default-value ("GEN" "$@")) nil [50082 50110])
            ("tags" function (:arguments ("FORCE")) nil [50174 50216])
            ("TAGS" function (:arguments ("FORCE")) nil [50174 50216])
            ("includecheck" function nil nil [50346 50488])
            ("versioncheck" function nil nil [50489 50630])
            ("namespacecheck" function nil nil [50631 50688])
            ("export_report" function nil nil [50689 50749])
            ("PHONY" variable (:default-value ("checkstack" "kernelrelease" "kernelversion")) nil [50818 50866])
            ("CHECKSTACK_ARCH" variable (:default-value ("$(SUBARCH)")) nil [51133 51163])
            ("CHECKSTACK_ARCH" variable (:default-value ("$(ARCH)")) nil [51168 51195])
            ("checkstack" function nil nil [51201 51321])
            ("kernelrelease" function nil nil [51322 51484])
            ("kernelversion" function nil nil [51484 51523])
            ("%.s" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [52178 52270])
            ("%.i" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [52270 52362])
            ("%.o" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [52362 52454])
            ("%.lst" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [52454 52548])
            ("%.s" function (:arguments ("%.S" "prepare" "scripts" "FORCE")) nil [52548 52640])
            ("%.o" function (:arguments ("%.S" "prepare" "scripts" "FORCE")) nil [52640 52732])
            ("%.symtypes" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [52732 52831])
            ("/" function (:arguments ("prepare" "scripts" "FORCE")) nil [52842 52966])
            ("%/" function (:arguments ("prepare" "scripts" "FORCE")) nil [52966 53091])
            ("%.ko" function (:arguments ("prepare" "scripts" "FORCE")) nil [53091 53284])
            ("quiet_cmd_rmdirs" variable (:default-value ("$(if $(wildcard $(rm-dirs)),CLEAN   $(wildcard $(rm-dirs)))")) nil [53412 53491])
            ("quiet_cmd_rmfiles" variable (:default-value ("$(if $(wildcard $(rm-files)),CLEAN   $(wildcard $(rm-files)))")) nil [53529 53611])
            ("quiet_cmd_depmod" variable (:default-value ("DEPMOD" "$(KERNELRELEASE)")) nil [53715 53759])
            ("cmd_crmodverdir" variable (:default-value ("$(Q)mkdir" "-p" "$(MODVERDIR)" "$(if $(KBUILD_MODULES),; rm -f $(MODVERDIR)/*)")) nil [54157 54268])
            ("a_flags" variable (:default-value ("-Wp,-MD,$(depfile)" "$(KBUILD_AFLAGS)" "$(AFLAGS_KERNEL)" "$(NOSTDINC_FLAGS)" "$(LINUXINCLUDE)" "$(KBUILD_CPPFLAGS)" "$(modkern_aflags)" "$(EXTRA_AFLAGS)" "$(AFLAGS_$(basetarget).o)")) nil [54269 54455])
            ("quiet_cmd_as_o_S" variable (:default-value ("AS" "$@")) nil [54456 54486])
            ("cmd_as_o_S" variable (:default-value ("$(CC)" "$(a_flags)" "-c" "-o" "$@" "$<")) nil [54486 54534])
            ("targets" variable (:default-value ("$(wildcard $(sort $(targets)))")) nil [54567 54609])
            ("cmd_files" variable (:default-value ("$(wildcard .*.cmd $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))")) nil [54609 54696])
            ("clean" variable (:default-value ("-f" "$(if $(KBUILD_SRC),$(srctree)/)scripts/Makefile.clean" "obj")) nil [54914 54984])
            ("PHONY" variable (:default-value ("FORCE")) nil [55008 55023])
            ("FORCE" function nil nil [55023 55030]))          
    :file "Makefile"
    :pointmax 55190
    :fsize 55189
    :lastmodtime '(19079 15783)
    :unmatched-syntax '((semantic-list 55182 . 55189) (punctuation 55181 . 55182) (punctuation 55179 . 55180) (symbol 55173 . 55179) (bol 55173 . 55173) (ENDIF 54985 . 54990) (bol 54985 . 54985) (semantic-list 54797 . 54808) (punctuation 54796 . 54797) (INCLUDE 54788 . 54795) (bol 54786 . 54786) (punctuation 54735 . 54736) (punctuation 54733 . 54734) (semantic-list 54722 . 54733) (punctuation 54721 . 54722) (bol 54719 . 54719) (symbol 54060 . 54062) (punctuation 54009 . 54010) (semantic-list 53994 . 54009) (punctuation 53993 . 53994) (semantic-list 53926 . 53984) (punctuation 53925 . 53926) (symbol 53874 . 53884) (symbol 53871 . 53873) (symbol 53867 . 53870) (semantic-list 53858 . 53866) (punctuation 53857 . 53858) (symbol 53819 . 53823) (punctuation 53817 . 53818) (semantic-list 53784 . 53817) (IF 53781 . 53783) (punctuation 53776 . 53777) (symbol 53765 . 53775) (bol 53759 . 53759) (semantic-list 53638 . 53648) (punctuation 53637 . 53638) (symbol 53634 . 53636) (symbol 53631 . 53633) (punctuation 53629 . 53630) (symbol 53617 . 53628) (bol 53611 . 53611) (semantic-list 53518 . 53527) (punctuation 53517 . 53518) (symbol 53513 . 53516) (symbol 53510 . 53512) (punctuation 53508 . 53509) (symbol 53497 . 53507) (bol 53491 . 53491) (semantic-list 52129 . 52170) (punctuation 52128 . 52129) (punctuation 52126 . 52127) (symbol 52115 . 52125) (bol 52107 . 52107) (semantic-list 52075 . 52106) (punctuation 52074 . 52075) (semantic-list 52059 . 52074) (punctuation 52058 . 52059) (punctuation 52056 . 52057) (symbol 52045 . 52054) (bol 52037 . 52037) (semantic-list 51995 . 52036) (punctuation 51994 . 51995) (punctuation 51993 . 51994) (symbol 51984 . 51993) (bol 51976 . 51976) (semantic-list 51962 . 51970) (punctuation 51961 . 51962) (punctuation 51959 . 51960) (symbol 51948 . 51958) (bol 51940 . 51940) (semantic-list 51914 . 51939) (punctuation 51913 . 51914) (punctuation 51911 . 51912) (symbol 51900 . 51909) (bol 51892 . 51892) (ENDIF 50784 . 50789) (bol 50784 . 50784) (ENDIF 50750 . 50755) (bol 50750 . 50750) (punctuation 50171 . 50172) (punctuation 50170 . 50171) (symbol 50153 . 50169) (semantic-list 50144 . 50153) (punctuation 50143 . 50144) (semantic-list 50128 . 50142) (punctuation 50127 . 50128) (punctuation 50125 . 50126) (symbol 50116 . 50124) (bol 50110 . 50110) (ENDIF 49953 . 49958) (bol 49953 . 49953) (ELSE 47208 . 47212) (bol 47208 . 47208) (shell-command 46568 . 46615) (bol 46567 . 46567) (shell-command 46491 . 46566) (bol 46490 . 46490) (shell-command 46480 . 46489) (bol 46479 . 46479) (shell-command 46406 . 46478) (bol 46405 . 46405) (shell-command 46321 . 46404) (bol 46320 . 46320) (shell-command 46236 . 46319) (bol 46235 . 46235) (shell-command 46164 . 46234) (bol 46163 . 46163) (shell-command 46084 . 46162) (bol 46083 . 46083) (ENDIF 40240 . 40245) (bol 40240 . 40240) (ELSE 39872 . 39876) (bol 39872 . 39872) (symbol 36786 . 36790) (semantic-list 36777 . 36786) (punctuation 36776 . 36777) (punctuation 36774 . 36775) (symbol 36757 . 36773) (symbol 36750 . 36756) (bol 36750 . 36750) (symbol 36438 . 36453) (symbol 36431 . 36437) (bol 36431 . 36431) (symbol 35838 . 35843) (bol 35838 . 35838) (shell-command 35622 . 35837) (bol 35621 . 35621) (symbol 35603 . 35620) (symbol 35596 . 35602) (bol 35596 . 35596) (symbol 35589 . 35594) (bol 35589 . 35589) (shell-command 35263 . 35588) (bol 35262 . 35262) (symbol 35241 . 35261) (symbol 35234 . 35240) (bol 35234 . 35234) (symbol 34911 . 34916) (bol 34911 . 34911) (shell-command 34565 . 34910) (bol 34564 . 34564) (symbol 34549 . 34563) (symbol 34542 . 34548) (bol 34542 . 34542) (symbol 34353 . 34358) (bol 34353 . 34353) (shell-command 33524 . 34352) (bol 33523 . 33523) (symbol 33509 . 33522) (symbol 33502 . 33508) (bol 33502 . 33502) (semantic-list 33325 . 33331) (punctuation 33324 . 33325) (symbol 33322 . 33324) (symbol 33319 . 33321) (symbol 33316 . 33318) (punctuation 33314 . 33315) (punctuation 33313 . 33314) (symbol 33292 . 33312) (symbol 33285 . 33291) (bol 33285 . 33285) (shell-command 32541 . 32744) (bol 32540 . 32540) (shell-command 32337 . 32539) (bol 32336 . 32336) (shell-command 32284 . 32335) (bol 32283 . 32283) (shell-command 31247 . 31296) (bol 31246 . 31246) (semantic-list 31202 . 31238) (punctuation 31201 . 31202) (punctuation 31199 . 31200) (symbol 31184 . 31198) (bol 31176 . 31176) (semantic-list 31074 . 31170) (punctuation 31073 . 31074) (punctuation 31071 . 31072) (symbol 31056 . 31070) (bol 31048 . 31048) (shell-command 28278 . 28300) (bol 28277 . 28277) (shell-command 28243 . 28276) (bol 28242 . 28242) (shell-command 28218 . 28241) (bol 28217 . 28217) (shell-command 28176 . 28210) (bol 28175 . 28175) (shell-command 28114 . 28142) (bol 28113 . 28113) (shell-command 28037 . 28085) (bol 28036 . 28036) (symbol 27865 . 27870) (bol 27865 . 27865) (shell-command 27801 . 27864) (bol 27800 . 27800) (shell-command 27746 . 27799) (bol 27745 . 27745) (shell-command 27716 . 27744) (bol 27715 . 27715) (shell-command 27713 . 27714) (bol 27712 . 27712) (symbol 27691 . 27711) (symbol 27684 . 27690) (bol 27684 . 27684) (semantic-list 27629 . 27683) (punctuation 27628 . 27629) (symbol 27600 . 27611) (semantic-list 27585 . 27599) (punctuation 27584 . 27585) (symbol 27570 . 27583) (semantic-list 27555 . 27569) (punctuation 27554 . 27555) (punctuation 27523 . 27524) (punctuation 27522 . 27523) (symbol 27519 . 27521) (symbol 27516 . 27518) (semantic-list 27506 . 27515) (punctuation 27505 . 27506) (semantic-list 27500 . 27504) (punctuation 27499 . 27500) (punctuation 27497 . 27498) (symbol 27477 . 27496) (bol 27471 . 27471) (ENDIF 27279 . 27284) (bol 27279 . 27279) (punctuation 26397 . 26398) (punctuation 26396 . 26397) (symbol 26394 . 26395) (semantic-list 26352 . 26393) (punctuation 26351 . 26352) (semantic-list 26317 . 26327) (punctuation 26316 . 26317) (symbol 26314 . 26315) (symbol 26312 . 26313) (punctuation 26311 . 26312) (symbol 26308 . 26310) (semantic-list 26303 . 26307) (punctuation 26302 . 26303) (punctuation 26300 . 26301) (symbol 26287 . 26299) (bol 26281 . 26281) (symbol 26199 . 26204) (bol 26199 . 26199) (shell-command 26142 . 26198) (bol 26141 . 26141) (shell-command 26119 . 26140) (bol 26118 . 26118) (shell-command 26089 . 26117) (bol 26088 . 26088) (shell-command 26085 . 26087) (bol 26084 . 26084) (symbol 26071 . 26083) (symbol 26064 . 26070) (bol 26064 . 26064) (symbol 25860 . 25865) (bol 25860 . 25860) (shell-command 25623 . 25859) (bol 25622 . 25622) (shell-command 25417 . 25621) (bol 25416 . 25416) (symbol 25400 . 25415) (symbol 25393 . 25399) (bol 25393 . 25393) (symbol 24277 . 24282) (bol 24277 . 24277) (shell-command 24258 . 24276) (bol 24257 . 24257) (shell-command 23835 . 24256) (bol 23834 . 23834) (shell-command 23776 . 23832) (bol 23775 . 23775) (shell-command 23753 . 23774) (bol 23752 . 23752) (shell-command 23696 . 23750) (bol 23695 . 23695) (shell-command 23693 . 23694) (bol 23692 . 23692) (symbol 23677 . 23691) (symbol 23670 . 23676) (bol 23670 . 23670) (symbol 23371 . 23388) (semantic-list 23362 . 23371) (punctuation 23361 . 23362) (semantic-list 23346 . 23360) (punctuation 23345 . 23346) (punctuation 23343 . 23344) (symbol 23332 . 23342) (bol 23326 . 23326) (symbol 23272 . 23276) (punctuation 23271 . 23272) (semantic-list 23264 . 23271) (punctuation 23263 . 23264) (semantic-list 23256 . 23262) (punctuation 23255 . 23256) (punctuation 23245 . 23246) (symbol 23243 . 23245) (punctuation 23238 . 23239) (symbol 23229 . 23238) (symbol 23227 . 23228) (punctuation 23225 . 23226) (semantic-list 23206 . 23224) (punctuation 23205 . 23206) (punctuation 23204 . 23205) (symbol 23203 . 23204) (symbol 23198 . 23202) (punctuation 23189 . 23190) (symbol 23177 . 23189) (symbol 23168 . 23176) (symbol 23165 . 23167) (ELSE 23150 . 23154) (punctuation 23142 . 23143) (symbol 23133 . 23142) (symbol 23131 . 23132) (symbol 23126 . 23130) (punctuation 23116 . 23117) (symbol 23108 . 23116) (symbol 23105 . 23107) (symbol 23102 . 23104) (symbol 23090 . 23094) (punctuation 23088 . 23089) (semantic-list 23071 . 23088) (IF 23068 . 23070) (punctuation 23043 . 23044) (symbol 23041 . 23043) (symbol 23037 . 23040) (punctuation 23035 . 23036) (symbol 23015 . 23034) (bol 23009 . 23009) (semantic-list 22852 . 22931) (punctuation 22851 . 22852) (symbol 22814 . 22825) (semantic-list 22799 . 22813) (punctuation 22798 . 22799) (symbol 22784 . 22797) (semantic-list 22736 . 22750) (punctuation 22735 . 22736) (semantic-list 22721 . 22734) (punctuation 22720 . 22721) (symbol 22717 . 22719) (punctuation 22707 . 22708) (punctuation 22706 . 22707) (symbol 22703 . 22705) (semantic-list 22685 . 22702) (punctuation 22684 . 22685) (semantic-list 22674 . 22683) (punctuation 22673 . 22674) (semantic-list 22668 . 22672) (punctuation 22667 . 22668) (punctuation 22665 . 22666) (punctuation 22664 . 22665) (symbol 22650 . 22663) (bol 22644 . 22644) (punctuation 22642 . 22643) (punctuation 22641 . 22642) (symbol 22633 . 22635) (punctuation 22631 . 22632) (punctuation 22630 . 22631) (symbol 22610 . 22629) (bol 22610 . 22610) (symbol 20445 . 20458) (symbol 20438 . 20444) (bol 20438 . 20438) (ENDIF 20412 . 20417) (bol 20412 . 20412) (ENDIF 20358 . 20363) (bol 20358 . 20358) (symbol 19941 . 19947) (symbol 19934 . 19940) (bol 19934 . 19934) (symbol 19667 . 19672) (punctuation 19665 . 19666) (punctuation 19664 . 19665) (symbol 19651 . 19663) (symbol 19644 . 19650) (bol 19644 . 19644) (symbol 19496 . 19503) (punctuation 19494 . 19495) (punctuation 19493 . 19494) (symbol 19480 . 19492) (symbol 19473 . 19479) (bol 19473 . 19473) (semantic-list 18947 . 18956) (punctuation 18946 . 18947) (punctuation 18944 . 18945) (punctuation 18943 . 18944) (symbol 18929 . 18942) (bol 18921 . 18921) (semantic-list 18895 . 18920) (punctuation 18894 . 18895) (bol 18886 . 18886) (semantic-list 18850 . 18859) (punctuation 18849 . 18850) (punctuation 18847 . 18848) (punctuation 18846 . 18847) (symbol 18832 . 18845) (bol 18824 . 18824) (semantic-list 18798 . 18823) (punctuation 18797 . 18798) (bol 18789 . 18789) (semantic-list 18751 . 18762) (punctuation 18750 . 18751) (punctuation 18748 . 18749) (punctuation 18747 . 18748) (symbol 18731 . 18746) (bol 18723 . 18723) (semantic-list 18695 . 18722) (punctuation 18694 . 18695) (bol 18686 . 18686) (ENDIF 16702 . 16707) (bol 16702 . 16702) (ENDIF 16594 . 16599) (bol 16594 . 16594) (symbol 15544 . 15572) (symbol 15535 . 15543) (bol 15535 . 15535) (symbol 15384 . 15408) (symbol 15375 . 15383) (bol 15375 . 15375) (ENDIF 15312 . 15317) (bol 15312 . 15312) (symbol 14404 . 14418) (symbol 14387 . 14403) (symbol 14380 . 14386) (bol 14380 . 14380) (ENDIF 13680 . 13685) (bol 13672 . 13672) (ENDIF 13666 . 13671) (bol 13650 . 13650) (symbol 13648 . 13649) (punctuation 13646 . 13647) (punctuation 13645 . 13646) (symbol 13631 . 13644) (bol 13607 . 13607) (semantic-list 13559 . 13606) (IFNEQ 13553 . 13558) (bol 13537 . 13537) (symbol 13535 . 13536) (punctuation 13533 . 13534) (punctuation 13532 . 13533) (symbol 13517 . 13531) (bol 13501 . 13501) (semantic-list 13457 . 13500) (IFNEQ 13451 . 13456) (bol 13443 . 13443) (shell-command 13405 . 13410) (bol 13404 . 13404) (shell-command 13387 . 13403) (bol 13386 . 13386) (shell-command 13322 . 13385) (bol 13321 . 13321) (shell-command 12490 . 12593) (bol 12489 . 12489) (shell-command 12459 . 12488) (bol 12458 . 12458) (symbol 11327 . 11340) (symbol 11313 . 11326) (symbol 11299 . 11312) (symbol 11292 . 11298) (bol 11292 . 11292) (symbol 11278 . 11291) (symbol 11264 . 11277) (symbol 11250 . 11263) (symbol 11243 . 11249) (bol 11243 . 11243) (symbol 11235 . 11242) (symbol 11222 . 11234) (symbol 11209 . 11221) (symbol 11194 . 11208) (symbol 11178 . 11193) (symbol 11171 . 11177) (bol 11171 . 11171) (symbol 11159 . 11169) (symbol 11153 . 11158) (symbol 11138 . 11152) (symbol 11125 . 11137) (symbol 11117 . 11124) (symbol 11110 . 11116) (bol 11110 . 11110) (symbol 11098 . 11109) (symbol 11093 . 11097) (symbol 11084 . 11092) (symbol 11080 . 11083) (symbol 11075 . 11079) (symbol 11067 . 11074) (symbol 11059 . 11066) (symbol 11053 . 11058) (symbol 11050 . 11052) (symbol 11047 . 11049) (symbol 11043 . 11046) (symbol 11036 . 11042) (bol 11036 . 11036) (symbol 11033 . 11035) (symbol 11030 . 11032) (symbol 11027 . 11029) (symbol 11013 . 11026) (symbol 11002 . 11012) (symbol 10995 . 11001) (symbol 10982 . 10994) (symbol 10974 . 10981) (symbol 10969 . 10973) (symbol 10962 . 10968) (bol 10962 . 10962) (symbol 10948 . 10961) (symbol 10934 . 10947) (symbol 10925 . 10933) (symbol 10914 . 10924) (symbol 10906 . 10913) (symbol 10899 . 10905) (bol 10899 . 10899) (symbol 9178 . 9192) (symbol 9176 . 9177) (symbol 9170 . 9175) (symbol 9163 . 9169) (bol 9163 . 9163) (symbol 9148 . 9155) (punctuation 9147 . 9148) (symbol 9142 . 9147) (bol 9140 . 9140) (punctuation 9013 . 9014) (punctuation 9011 . 9012) (symbol 9009 . 9010) (bol 9007 . 9007) (symbol 9000 . 9006) (punctuation 8999 . 9000) (symbol 8994 . 8999) (bol 8992 . 8992) (punctuation 8985 . 8986) (symbol 8983 . 8984) (bol 8981 . 8981) (punctuation 8979 . 8980) (symbol 8973 . 8978) (bol 8971 . 8971) (symbol 7999 . 8012) (symbol 7988 . 7998) (symbol 7972 . 7987) (symbol 7965 . 7971) (bol 7965 . 7965) (symbol 7950 . 7964) (symbol 7935 . 7949) (symbol 7928 . 7934) (bol 7928 . 7928) (symbol 7919 . 7920) (punctuation 7917 . 7918) (punctuation 7916 . 7917) (symbol 7901 . 7915) (bol 7899 . 7899) (symbol 7866 . 7867) (punctuation 7864 . 7865) (punctuation 7863 . 7864) (symbol 7848 . 7862) (bol 7846 . 7846) (semantic-list 7605 . 7633) (punctuation 7604 . 7605) (punctuation 7602 . 7603) (punctuation 7601 . 7602) (symbol 7586 . 7600) (bol 7584 . 7584) (symbol 6868 . 6875) (punctuation 6866 . 6867) (punctuation 6865 . 6866) (symbol 6850 . 6864) (bol 6850 . 6850) (symbol 6838 . 6842) (punctuation 6836 . 6837) (punctuation 6835 . 6836) (symbol 6825 . 6833) (bol 6818 . 6818) (symbol 6718 . 6720) (punctuation 6716 . 6717) (punctuation 6715 . 6716) (symbol 6707 . 6714) (bol 6700 . 6700) (symbol 6633 . 6638) (punctuation 6631 . 6632) (punctuation 6630 . 6631) (symbol 6622 . 6629) (bol 6615 . 6615) (symbol 6544 . 6547) (punctuation 6542 . 6543) (punctuation 6541 . 6542) (symbol 6533 . 6540) (bol 6525 . 6525) (symbol 6493 . 6496) (punctuation 6491 . 6492) (punctuation 6490 . 6491) (symbol 6482 . 6489) (bol 6474 . 6474) (punctuation 6332 . 6333) (punctuation 6331 . 6332) (symbol 6317 . 6330) (bol 6317 . 6317) (semantic-list 6307 . 6316) (punctuation 6306 . 6307) (punctuation 6304 . 6305) (punctuation 6303 . 6304) (symbol 6297 . 6301) (bol 6297 . 6297) (symbol 4776 . 4782) (symbol 4770 . 4775) (symbol 4762 . 4769) (symbol 4754 . 4761) (symbol 4747 . 4753) (bol 4747 . 4747) (ENDIF 4182 . 4187) (bol 4182 . 4182) (ENDIF 4148 . 4153) (bol 4148 . 4148) (semantic-list 3665 . 3754) (punctuation 3664 . 3665) (bol 3664 . 3664) (ENDIF 3249 . 3254) (bol 3247 . 3247) (semantic-list 3243 . 3246) (punctuation 3242 . 3243) (punctuation 3240 . 3241) (punctuation 3239 . 3240) (symbol 3225 . 3238) (bol 3221 . 3221) (semantic-list 3189 . 3220) (IFEQ 3184 . 3188) (bol 3182 . 3182) (ENDIF 2344 . 2349) (bol 2342 . 2342) (semantic-list 2338 . 2341) (punctuation 2337 . 2338) (punctuation 2335 . 2336) (punctuation 2334 . 2335) (symbol 2320 . 2333) (bol 2316 . 2316) (semantic-list 2284 . 2315) (IFEQ 2279 . 2283) (bol 2277 . 2277) (semantic-list 2253 . 2262) (punctuation 2252 . 2253) (punctuation 2250 . 2251) (punctuation 2249 . 2250) (symbol 2235 . 2248) (bol 2233 . 2233) (symbol 2025 . 2026) (punctuation 2023 . 2024) (symbol 2007 . 2022) (bol 2005 . 2005) (ENDIF 1970 . 1975) (bol 1968 . 1968) (semantic-list 1964 . 1967) (punctuation 1963 . 1964) (punctuation 1961 . 1962) (symbol 1945 . 1960) (bol 1941 . 1941) (semantic-list 1909 . 1940) (IFEQ 1904 . 1908) (bol 1902 . 1902) (symbol 1514 . 1515) (punctuation 1512 . 1513) (symbol 1497 . 1511) (bol 1495 . 1495) (ENDIF 1461 . 1466) (bol 1459 . 1459) (semantic-list 1455 . 1458) (punctuation 1454 . 1455) (punctuation 1452 . 1453) (symbol 1437 . 1451) (bol 1433 . 1433) (semantic-list 1401 . 1432) (IFEQ 1396 . 1400) (bol 1394 . 1394))
    )
   )
  :file "!usr!src!linux-2.6.30-gentoo-r5!semantic.cache"
  :semantic-tag-version "2.0pre6"
  :semanticdb-version "2.0pre6"
  )
