;; Object Desktop/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "Desktop/"
  :tables (list 
   (semanticdb-table "python-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("py-version" variable
               (:constant-flag t
                :default-value "5.1.0")
                nil [332 395])
            ("comint" include nil nil [3582 3599])
            ("custom" include nil nil [3600 3617])
            ("cl" include nil nil [3618 3631])
            ("compile" include nil nil [3632 3650])
            ("ansi-color" include nil nil [3651 3672])
            ("python" customgroup (:user-visible-flag t) nil [3769 3900])
            ("py-tab-always-indent" variable
               (:user-visible-flag t
                :default-value t)
                nil [3902 4120])
            ("py-python-command" variable
               (:user-visible-flag t
                :default-value "python")
                nil [4122 4246])
            ("make-obsolete-variable" code nil nil [4248 4311])
            ("py-jython-command" variable
               (:user-visible-flag t
                :default-value "jython")
                nil [4312 4464])
            ("py-default-interpreter" variable
               (:user-visible-flag t
                :default-value (quote cpython))
                nil [4466 5258])
            ("py-python-command-args" variable
               (:user-visible-flag t
                :default-value (quote ("-i")))
                nil [5260 5415])
            ("make-obsolete-variable" code nil nil [5417 5490])
            ("py-jython-command-args" variable
               (:user-visible-flag t
                :default-value (quote ("-i")))
                nil [5491 5675])
            ("py-indent-offset" variable
               (:user-visible-flag t
                :default-value 4)
                nil [5677 5897])
            ("py-continuation-offset" variable
               (:user-visible-flag t
                :default-value 4)
                nil [5899 6211])
            ("py-smart-indentation" variable
               (:user-visible-flag t
                :default-value t)
                nil [6213 7242])
            ("py-align-multiline-strings-p" variable
               (:user-visible-flag t
                :default-value t)
                nil [7244 7663])
            ("py-block-comment-prefix" variable
               (:user-visible-flag t
                :default-value "##")
                nil [7665 8087])
            ("py-honor-comment-indentation" variable
               (:user-visible-flag t
                :default-value t)
                nil [8089 9103])
            ("py-temp-directory" variable
               (:user-visible-flag t
                :default-value (let ((ok (quote (lambda (x) (and x (setq x (expand-file-name x)) (file-directory-p x) (file-writable-p x) x))))) (or (funcall ok (getenv "TMPDIR")) (funcall ok "/usr/tmp") (funcall ok "/tmp") (funcall ok "/var/tmp") (funcall ok ".") (error "Couldn't find a usable temp directory -- set `py-temp-directory'"))))
                nil [9105 9902])
            ("py-beep-if-tab-change" variable
               (:user-visible-flag t
                :default-value t)
                nil [9904 10397])
            ("py-jump-on-exception" variable
               (:user-visible-flag t
                :default-value t)
                nil [10399 10713])
            ("py-ask-about-save" variable (:default-value t) nil [10715 10914])
            ("py-backspace-function" variable
               (:user-visible-flag t
                :default-value (quote backward-delete-char-untabify))
                nil [10916 11088])
            ("py-delete-function" variable
               (:user-visible-flag t
                :default-value (quote delete-char))
                nil [11090 11237])
            ("py-imenu-show-method-args-p" variable (:user-visible-flag t) nil [11239 11432])
            ("make-variable-buffer-local" code nil nil [11433 11479])
            ("py-pdbtrack-do-tracking-p" variable
               (:user-visible-flag t
                :default-value t)
                nil [11481 11938])
            ("make-variable-buffer-local" code nil nil [11939 11994])
            ("py-pdbtrack-minor-mode-string" variable
               (:user-visible-flag t
                :default-value " PDB")
                nil [11996 12145])
            ("py-import-check-point-max" variable (:default-value 20000) nil [12147 12558])
            ("make-obsolete-variable" code nil nil [12560 12625])
            ("py-jython-packages" variable (:default-value (quote ("java" "javax" "org" "com"))) nil [12626 12778])
            ("py-master-file" variable nil nil [12800 13311])
            ("make-variable-buffer-local" code nil nil [13312 13356])
            ("py-pychecker-command" variable
               (:user-visible-flag t
                :default-value "pychecker")
                nil [13358 13504])
            ("py-pychecker-command-args" variable
               (:user-visible-flag t
                :default-value (quote ("--stdlib")))
                nil [13506 13688])
            ("py-shell-alist" variable
               (:user-visible-flag t
                :default-value (quote (("jython" quote jython) ("python" quote cpython))))
                nil [13690 13899])
            ("py-shell-input-prompt-1-regexp" variable
               (:user-visible-flag t
                :default-value "^>>> ")
                nil [13901 14050])
            ("py-shell-input-prompt-2-regexp" variable
               (:user-visible-flag t
                :default-value "^[.][.][.] ")
                nil [14052 14239])
            ("py-shell-switch-buffers-on-execute" variable
               (:user-visible-flag t
                :default-value t)
                nil [14241 14485])
            ("py-line-number-offset" variable nil nil [14603 14895])
            ("py-emacs-features" variable
               (:constant-flag t
                :default-value (let (features) features))
                nil [14897 15128])
            ("py-pseudo-keyword-face" variable (:default-value (quote py-pseudo-keyword-face)) nil [15180 15314])
            ("make-face" code nil nil [15315 15350])
            ("py-decorators-face" variable (:default-value (quote py-decorators-face)) nil [15374 15449])
            ("make-face" code nil nil [15450 15481])
            ("py-builtins-face" variable (:default-value (quote py-builtins-face)) nil [15504 15609])
            ("make-face" code nil nil [15610 15639])
            ("py-XXX-tag-face" variable (:default-value (quote py-XXX-tag-face)) nil [15683 15763])
            ("make-face" code nil nil [15764 15792])
            ("py-font-lock-mode-hook" function nil nil [15794 16304])
            ("add-hook" code nil nil [16305 16360])
            ("python-font-lock-keywords" variable (:default-value (let ((kw1 (mapconcat (quote identity) (quote ("and" "assert" "break" "class" "continue" "def" "del" "elif" "else" "except" "for" "from" "global" "if" "import" "in" "is" "lambda" "not" "or" "pass" "raise" "as" "return" "while" "with" "yield")) "\\|")) (kw2 (mapconcat (quote identity) (quote ("else:" "except:" "finally:" "try:")) "\\|")) (kw3 (mapconcat (quote identity) (quote ("__debug__" "__import__" "__name__" "abs" "all" "any" "apply" "basestring" "bin" "bool" "buffer" "bytearray" "callable" "chr" "classmethod" "cmp" "coerce" "compile" "complex" "copyright" "credits" "delattr" "dict" "dir" "divmod" "enumerate" "eval" "exec" "execfile" "exit" "file" "filter" "float" "format" "getattr" "globals" "hasattr" "hash" "help" "hex" "id" "input" "int" "intern" "isinstance" "issubclass" "iter" "len" "license" "list" "locals" "long" "map" "max" "memoryview" "min" "next" "object" "oct" "open" "ord" "pow" "print" "property" "quit" "range" "raw_input" "reduce" "reload" "repr" "round" "set" "setattr" "slice" "sorted" "staticmethod" "str" "sum" "super" "tuple" "type" "unichr" "unicode" "vars" "xrange" "zip")) "\\|")) (kw4 (mapconcat (quote identity) (quote ("ArithmeticError" "AssertionError" "AttributeError" "BaseException" "BufferError" "BytesWarning" "DeprecationWarning" "EOFError" "EnvironmentError" "Exception" "FloatingPointError" "FutureWarning" "GeneratorExit" "IOError" "ImportError" "ImportWarning" "IndentationError" "IndexError" "KeyError" "KeyboardInterrupt" "LookupError" "MemoryError" "NameError" "NotImplemented" "NotImplementedError" "OSError" "OverflowError" "PendingDeprecationWarning" "ReferenceError" "RuntimeError" "RuntimeWarning" "StandardError" "StopIteration" "SyntaxError" "SyntaxWarning" "SystemError" "SystemExit" "TabError" "TypeError" "UnboundLocalError" "UnicodeDecodeError" "UnicodeEncodeError" "UnicodeError" "UnicodeTranslateError" "UnicodeWarning" "UserWarning" "ValueError" "Warning" "ZeroDivisionError")) "\\|"))) (list (quote ("^[ 	]*\\(@.+\\)" 1 (quote py-decorators-face))) (cons (concat "\\<\\(" kw1 "\\)\\>[ 
	(]") 1) (list (concat "\\([^. 	]\\|^\\)[ 	]*\\<\\(" kw3 "\\)\\>[ 
	(]") 2 (quote py-builtins-face)) (cons (concat "\\<\\(" kw2 "\\)[ 
	(]") 1) (list (concat "\\<\\(" kw4 "\\)[ 
	:,(]") 1 (quote py-builtins-face)) (quote ("\\<class[ 	]+\\([a-zA-Z_]+[a-zA-Z0-9_]*\\)" 1 font-lock-type-face)) (quote ("\\<def[ 	]+\\([a-zA-Z_]+[a-zA-Z0-9_]*\\)" 1 font-lock-function-name-face)) (quote ("\\<\\(self\\|Ellipsis\\|True\\|False\\|None\\)\\>" 1 py-pseudo-keyword-face)) (quote ("XXX\\|TODO\\|FIXME" 0 py-XXX-tag-face t))))) nil [16362 20842])
            ("put" code nil nil [20843 20910])
            ("py-file-queue" variable nil nil [20980 21107])
            ("py-pdbtrack-is-tracking-p" variable nil nil [21109 21147])
            ("py-pychecker-history" variable nil nil [21149 21182])
            ("py-stringlit-re" variable
               (:constant-flag t
                :default-value (concat "[rR]?'''[^']*\\(\\('[^']\\|''[^']\\)[^']*\\)*'''" "\\|" "[rR]?\"\"\"[^\"]*\\(\\(\"[^\"]\\|\"\"[^\"]\\)[^\"]*\\)*\"\"\"" "\\|" "[rR]?'\\([^'
\\]\\|\\\\.\\)*'" "\\|" "[rR]?\"\\([^\"
\\]\\|\\\\.\\)*\""))
                nil [21201 22011])
            ("py-continued-re" variable
               (:constant-flag t
                :default-value (concat "\\(" "[^#'\"
\\]" "\\|" py-stringlit-re "\\)*" "\\\\$"))
                nil [22013 22284])
            ("py-blank-or-comment-re" variable
               (:constant-flag t
                :default-value "[ 	]*\\($\\|#\\)")
                nil [22286 22396])
            ("py-outdent-re" variable
               (:constant-flag t
                :default-value (concat "\\(" (mapconcat (quote identity) (quote ("else:" "except\\(\\s +.*\\)?:" "finally:" "elif\\s +.*:")) "\\|") "\\)"))
                nil [22398 22754])
            ("py-block-closing-keywords-re" variable
               (:constant-flag t
                :default-value "\\(return\\|raise\\|break\\|continue\\|pass\\)")
                nil [22756 22918])
            ("py-no-outdent-re" variable
               (:constant-flag t
                :default-value (concat "\\(" (mapconcat (quote identity) (list "try:" "except\\(\\s +.*\\)?:" "while\\s +.*:" "for\\s +.*:" "if\\s +.*:" "elif\\s +.*:" (concat py-block-closing-keywords-re "[ 	
]")) "\\|") "\\)"))
                nil [22920 23386])
            ("py-traceback-line-re" variable (:default-value "[ 	]+File \"\\([^\"]+\\)\", line \\([0-9]+\\)") nil [23388 23518])
            ("py-pdbtrack-stack-entry-regexp" variable
               (:constant-flag t
                :default-value "^> \\(.*\\)(\\([0-9]+\\))\\([?a-zA-Z0-9_]+\\)()")
                nil [23542 23757])
            ("py-pdbtrack-input-prompt" variable
               (:constant-flag t
                :default-value "
[(<]*[Pp]db[>)]+ ")
                nil [23759 23880])
            ("py-pdbtrack-track-range" variable
               (:constant-flag t
                :default-value 10000)
                nil [23882 23997])
            ("python-mode-abbrev-table" variable nil nil [24098 24185])
            ("define-abbrev-table" code nil nil [24186 24237])
            ("python-mode-hook" variable (:user-visible-flag t) nil [24239 24303])
            ("make-obsolete-variable" code nil nil [24305 24366])
            ("jython-mode-hook" variable (:user-visible-flag t) nil [24367 24476])
            ("py-shell-hook" variable (:user-visible-flag t) nil [24478 24536])
            ("and" code nil nil [24671 24772])
            ("py-mode-map" variable nil nil [24774 24839])
            ("if" code nil nil [24840 28955])
            ("py-mode-output-map" variable nil nil [28957 29032])
            ("if" code nil nil [29033 29563])
            ("py-shell-map" variable nil nil [29565 29633])
            ("if" code nil nil [29634 29875])
            ("py-mode-syntax-table" variable nil nil [29877 29958])
            ("when" code nil nil [29959 32090])
            ("py-dotted-expression-syntax-table" variable nil nil [32191 32298])
            ("when" code nil nil [32299 32567])
            ("py-safe" function (:arguments ("&rest" "body")) nil [32585 32738])
            ("py-keep-region-active" function nil nil [32740 33052])
            ("py-point" function (:arguments ("position")) nil [33054 34112])
            ("py-highlight-line" function (:arguments ("from" "to" "file" "line")) nil [34114 34471])
            ("py-in-literal" function (:arguments ("&optional" "lim")) nil [34473 35002])
            ("py-fast-in-literal" function (:arguments ("&optional" "lim")) nil [35106 35317])
            ("if" code nil nil [35319 35409])
            ("py-menu" variable nil nil [35551 35735])
            ("and" code nil nil [35737 37048])
            ("py-imenu-class-regexp" variable (:default-value (concat "\\(" "^[ 	]*" "\\(class[ 	]+[a-zA-Z0-9_]+\\)" "\\([ 	]*\\((\\([a-zA-Z0-9_,. 	
]\\)*)\\)?\\)" "[ 	]*:" "\\)")) nil [37074 37632])
            ("py-imenu-method-regexp" variable (:default-value (concat "\\(" "^[ 	]*" "\\(def[ 	]+" "\\([a-zA-Z0-9_]+\\)" "[ 	]*(\\([^:#]*\\))" "\\)" "[ 	]*:" "\\)")) nil [37634 38386])
            ("py-imenu-method-no-arg-parens" variable (:default-value (quote (2 8))) nil [38388 38666])
            ("py-imenu-method-arg-parens" variable (:default-value (quote (2 7))) nil [38668 38936])
            ("py-imenu-generic-expression" variable (:default-value (cons (concat py-imenu-class-regexp "\\|" py-imenu-method-regexp) py-imenu-method-no-arg-parens)) nil [39086 39519])
            ("py-imenu-generic-regexp" variable nil nil [39687 39723])
            ("py-imenu-generic-parens" variable nil nil [39724 39760])
            ("py-imenu-create-index-function" function nil nil [39763 40524])
            ("py-imenu-create-index-engine" function (:arguments ("&optional" "start-indent")) nil [40526 44863])
            ("py-choose-shell-by-shebang" function nil nil [44868 45849])
            ("py-choose-shell-by-import" function nil nil [45854 46502])
            ("py-choose-shell" function (:user-visible-flag t) nil [46506 47040])
            ("python-mode" function (:user-visible-flag t) nil [47059 50736])
            ("make-obsolete" code nil nil [50739 50781])
            ("jython-mode" function (:user-visible-flag t) nil [50782 51139])
            ("let" code nil nil [51437 51673])
            ("when" code nil nil [51689 51846])
            ("py-outdent-p" function nil nil [51874 52460])
            ("py-electric-colon" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [52462 54107])
            ("py-execute-file" function (:arguments ("proc" "filename")) nil [54154 55028])
            ("py-comint-output-filter-function" function (:arguments ("string")) nil [55030 55787])
            ("py-pdbtrack-overlay-arrow" function (:arguments ("activation")) nil [55789 56329])
            ("py-pdbtrack-track-stack-file" function (:arguments ("text")) nil [56331 58803])
            ("py-pdbtrack-get-source-buffer" function (:arguments ("block")) nil [58805 60575])
            ("py-pdbtrack-grub-for-buffer" function (:arguments ("funcname" "lineno")) nil [60577 61553])
            ("py-postprocess-output-buffer" function (:arguments ("buf")) nil [61555 62185])
            ("py-serial-number" variable nil nil [62277 62304])
            ("py-exception-buffer" variable nil nil [62305 62337])
            ("py-output-buffer" variable (:default-value "*Python Output*") nil [62338 62381])
            ("make-variable-buffer-local" code nil nil [62382 62428])
            ("py-which-shell" variable nil nil [62473 62500])
            ("py-which-args" variable (:default-value py-python-command-args) nil [62501 62547])
            ("py-which-bufname" variable (:default-value "Python") nil [62548 62582])
            ("make-variable-buffer-local" code nil nil [62583 62627])
            ("make-variable-buffer-local" code nil nil [62628 62671])
            ("make-variable-buffer-local" code nil nil [62672 62718])
            ("py-toggle-shells" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [62720 64117])
            ("py-shell" function
               (:user-visible-flag t
                :arguments ("&optional" "argprompt"))
                nil [64134 67607])
            ("py-clear-queue" function (:user-visible-flag t) nil [67609 67859])
            ("py-execute-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "&optional" "async"))
                nil [67863 72887])
            ("py-execute-buffer" function
               (:user-visible-flag t
                :arguments ("&optional" "async"))
                nil [72918 73822])
            ("py-execute-import-or-reload" function
               (:user-visible-flag t
                :arguments ("&optional" "async"))
                nil [73824 75701])
            ("py-execute-def-or-class" function
               (:user-visible-flag t
                :arguments ("&optional" "async"))
                nil [75704 76141])
            ("py-execute-string" function
               (:user-visible-flag t
                :arguments ("string" "&optional" "async"))
                nil [76144 76660])
            ("py-jump-to-exception" function (:arguments ("file" "line")) nil [76665 77813])
            ("py-mouseto-exception" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [77815 78404])
            ("py-goto-exception" function (:user-visible-flag t) nil [78406 78804])
            ("py-find-next-exception" function (:arguments ("start" "buffer" "searchdir" "errwhere")) nil [78806 79611])
            ("py-down-exception" function
               (:user-visible-flag t
                :arguments ("&optional" "bottom"))
                nil [79613 80120])
            ("py-up-exception" function
               (:user-visible-flag t
                :arguments ("&optional" "top"))
                nil [80122 80611])
            ("py-electric-backspace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [80636 82973])
            ("py-electric-delete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [82976 83900])
            ("put" code nil nil [83947 83991])
            ("put" code nil nil [84000 84044])
            ("put" code nil nil [84058 84115])
            ("put" code nil nil [84124 84181])
            ("put" code nil nil [84195 84252])
            ("put" code nil nil [84261 84318])
            ("py-indent-line" function
               (:user-visible-flag t
                :arguments ("&optional" "arg"))
                nil [84336 85751])
            ("py-newline-and-indent" function (:user-visible-flag t) nil [85753 86378])
            ("py-compute-indentation" function (:arguments ("honor-block-close-p")) nil [86380 94581])
            ("py-guess-indent-offset" function
               (:user-visible-flag t
                :arguments ("&optional" "global"))
                nil [94583 97149])
            ("py-comment-indent-function" function nil nil [97151 97744])
            ("py-narrow-to-defun" function
               (:user-visible-flag t
                :arguments ("&optional" "class"))
                nil [97746 98165])
            ("py-shift-region" function (:arguments ("start" "end" "count")) nil [98169 98456])
            ("py-shift-region-left" function
               (:user-visible-flag t
                :arguments ("start" "end" "&optional" "count"))
                nil [98458 99614])
            ("py-shift-region-right" function
               (:user-visible-flag t
                :arguments ("start" "end" "&optional" "count"))
                nil [99616 100393])
            ("py-indent-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "&optional" "indent-offset"))
                nil [100395 104026])
            ("py-comment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "&optional" "arg"))
                nil [104028 104253])
            ("py-join-words-wrapping" function (:arguments ("words" "separator" "line-prefix" "line-length")) nil [104255 104926])
            ("py-sort-imports" function (:user-visible-flag t) nil [104928 106096])
            ("py-previous-statement" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [106131 106885])
            ("py-next-statement" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [106887 107627])
            ("py-goto-block-up" function
               (:user-visible-flag t
                :arguments ("&optional" "nomark"))
                nil [107629 109161])
            ("py-beginning-of-def-or-class" function
               (:user-visible-flag t
                :arguments ("&optional" "class" "count"))
                nil [109163 111077])
            ("defalias" code nil nil [111106 111180])
            ("py-end-of-def-or-class" function
               (:user-visible-flag t
                :arguments ("&optional" "class" "count"))
                nil [111182 113485])
            ("defalias" code nil nil [113514 113576])
            ("py-mark-block" function
               (:user-visible-flag t
                :arguments ("&optional" "extend" "just-move"))
                nil [113613 118782])
            ("py-mark-def-or-class" function
               (:user-visible-flag t
                :arguments ("&optional" "class"))
                nil [118784 122245])
            ("py-forward-into-nomenclature" function
               (:user-visible-flag t
                :arguments ("&optional" "arg"))
                nil [122270 122979])
            ("py-backward-into-nomenclature" function
               (:user-visible-flag t
                :arguments ("&optional" "arg"))
                nil [122981 123340])
            ("py-pdbtrack-toggle-stack-tracking" function (:arguments ("arg")) nil [123367 123899])
            ("turn-on-pdbtrack" function nil nil [123901 123984])
            ("turn-off-pdbtrack" function nil nil [123986 124070])
            ("unless" code nil nil [124111 124195])
            ("py-pychecker-run" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [124197 125467])
            ("py-symbol-near-point" function nil nil [125829 126632])
            ("py-help-at-point" function (:user-visible-flag t) nil [126634 127303])
            ("py-dump-help-string" function (:arguments ("str")) nil [127554 129461])
            ("py-describe-mode" function (:user-visible-flag t) nil [129463 139814])
            ("info-look" include nil nil [139816 139836])
            ("when" code nil nil [139950 140295])
            ("py-parse-state-re" variable (:default-value (concat "^[ 	]*\\(elif\\|else\\|while\\|def\\|class\\)\\>" "\\|" "^[^ #	
]")) nil [140319 140436])
            ("py-parse-state" function nil nil [140438 141935])
            ("py-nesting-level" function nil nil [141937 142217])
            ("py-backslash-continuation-line-p" function nil nil [142255 142755])
            ("py-continuation-line-p" function nil nil [142757 142958])
            ("py-goto-beginning-of-tqs" function (:arguments ("delim")) nil [142960 143656])
            ("py-goto-initial-line" function nil nil [143658 144636])
            ("py-goto-beyond-final-line" function nil nil [144638 145665])
            ("py-statement-opens-block-p" function nil nil [145667 146982])
            ("py-statement-closes-block-p" function nil nil [146984 147378])
            ("py-goto-beyond-block" function nil nil [147380 147774])
            ("py-goto-statement-at-or-above" function nil nil [147776 148346])
            ("py-goto-statement-below" function nil nil [148348 148886])
            ("py-go-up-tree-to-keyword" function (:arguments ("key")) nil [148888 149981])
            ("py-suck-up-leading-text" function nil nil [149983 150288])
            ("py-suck-up-first-keyword" function nil nil [150290 150642])
            ("py-current-defun" function nil nil [150644 152335])
            ("py-help-address" variable
               (:constant-flag t
                :default-value "python-mode@python.org")
                nil [152340 152440])
            ("py-version" function (:user-visible-flag t) nil [152442 152626])
            ("py-submit-bug-report" function
               (:user-visible-flag t
                :arguments ("enhancement-p"))
                nil [152702 154023])
            ("py-kill-emacs-hook" function nil nil [154027 154244])
            ("add-hook" code nil nil [154294 154341])
            ("add-hook" code nil nil [154342 154414])
            ("or" code nil nil [154462 154614])
            ("py-fill-comment" function (:arguments ("&optional" "justify")) nil [154753 157215])
            ("py-fill-string" function (:arguments ("start" "&optional" "justify")) nil [157218 159531])
            ("py-fill-paragraph" function
               (:user-visible-flag t
                :arguments ("&optional" "justify"))
                nil [159533 160921])
            ("python-mode" package nil nil [160926 160948]))          
    :file "python-mode.el"
    :pointmax 160978
    :fsize 160977
    :lastmodtime '(19097 14644)
    :unmatched-syntax 'nil
    )
   )
  :file "!home!risent!Desktop!semantic.cache"
  :semantic-tag-version "2.0pre6"
  :semanticdb-version "2.0pre6"
  )
