;; Object emacs-jabber/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs-jabber/"
  :tables (list 
   (semanticdb-table "jabber-roster.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-presence" include nil nil [960 986])
            ("jabber-util" include nil nil [987 1009])
            ("jabber-alert" include nil nil [1010 1033])
            ("jabber-keymap" include nil nil [1034 1058])
            ("format-spec" include nil nil [1059 1081])
            ("jabber-roster" customgroup (:user-visible-flag t) nil [1083 1153])
            ("jabber-roster-line-format" variable (:default-value " %a %c %-25n %u %-8s  %S
") nil [1155 1793])
            ("jabber-roster-subscription-display" variable (:default-value (quote (("none" . "   ") ("from" . "<  ") ("to" . "  >") ("both" . "<->")))) nil [1795 2811])
            ("jabber-resource-line-format" variable (:default-value "     %r - %s (%S), priority %p
") nil [2813 3402])
            ("jabber-roster-sort-functions" variable (:default-value (quote (jabber-roster-sort-by-status jabber-roster-sort-by-displayname))) nil [3404 3782])
            ("jabber-sort-order" variable (:default-value (quote ("chat" "" "away" "dnd" "xa"))) nil [3784 4036])
            ("jabber-show-resources" variable (:default-value (quote sometimes)) nil [4038 4274])
            ("jabber-remove-newlines" variable (:default-value t) nil [4276 4616])
            ("jabber-roster-show-bindings" variable (:default-value t) nil [4618 4739])
            ("jabber-roster-mode-hook" variable nil nil [4741 4858])
            ("jabber-roster-user-online" variable
               (:default-value (quote ((t (:foreground "blue" :weight bold :slant normal))))
                :type "face")
                nil [4860 5013])
            ("jabber-roster-user-xa" variable
               (:default-value (quote ((((background dark)) (:foreground "magenta" :weight normal :slant italic)) (t (:foreground "black" :weight normal :slant italic))))
                :type "face")
                nil [5015 5253])
            ("jabber-roster-user-dnd" variable
               (:default-value (quote ((t (:foreground "red" :weight normal :slant italic))))
                :type "face")
                nil [5255 5414])
            ("jabber-roster-user-away" variable
               (:default-value (quote ((t (:foreground "dark green" :weight normal :slant italic))))
                :type "face")
                nil [5416 5573])
            ("jabber-roster-user-chatty" variable
               (:default-value (quote ((t (:foreground "dark orange" :weight bold :slant normal))))
                :type "face")
                nil [5575 5735])
            ("jabber-roster-user-error" variable
               (:default-value (quote ((t (:foreground "red" :weight light :slant italic))))
                :type "face")
                nil [5737 5906])
            ("jabber-roster-user-offline" variable
               (:default-value (quote ((t (:foreground "dark grey" :weight light :slant italic))))
                :type "face")
                nil [5908 6069])
            ("jabber-roster-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map jabber-common-keymap) (define-key map [mouse-2] (quote jabber-popup-combined-menu)) (define-key map (kbd "TAB") (quote jabber-go-to-next-jid)) (define-key map (kbd "S-TAB") (quote jabber-go-to-previous-jid)) (define-key map (kbd "M-TAB") (quote jabber-go-to-previous-jid)) (define-key map (kbd "<backtab>") (quote jabber-go-to-previous-jid)) (define-key map (kbd "RET") (quote jabber-chat-with-jid-at-point)) (define-key map (kbd "C-k") (quote jabber-roster-delete-jid-at-point)) (define-key map "e" (quote jabber-roster-change)) (define-key map "s" (quote jabber-send-subscription-request)) (define-key map "q" (quote bury-buffer)) (define-key map "i" (quote jabber-get-disco-items)) (define-key map "j" (quote jabber-groupchat-join)) (define-key map "I" (quote jabber-get-disco-info)) (define-key map "b" (quote jabber-get-browse)) (define-key map "v" (quote jabber-get-version)) (define-key map "a" (quote jabber-send-presence)) (define-key map "g" (quote jabber-display-roster)) (define-key map "S" (quote jabber-ft-send)) map)) nil [6071 7195])
            ("jabber-roster-mode" function nil nil [7197 7679])
            ("put" code nil nil [7681 7727])
            ("jabber-switch-to-roster-buffer" function (:user-visible-flag t) nil [7729 7857])
            ("jabber-sort-roster" function nil nil [7859 8007])
            ("jabber-roster-sort-items" function (:arguments ("a" "b")) nil [8009 8330])
            ("jabber-roster-sort-by-status" function (:arguments ("a" "b")) nil [8332 8746])
            ("jabber-roster-sort-by-displayname" function (:arguments ("a" "b")) nil [8748 9013])
            ("jabber-fix-status" function (:arguments ("status")) nil [9015 9325])
            ("jabber-roster-positions" variable nil nil [9327 9514])
            ("jabber-display-roster" function (:user-visible-flag t) nil [9516 12497])
            ("jabber-display-roster-entry" function (:arguments ("buddy")) nil [12499 15414])
            ("jabber-presence-update-roster" function (:arguments ("who" "&rest" "ignore")) nil [15416 16753])
            ("jabber-go-to-next-jid" function (:user-visible-flag t) nil [16755 17221])
            ("jabber-go-to-previous-jid" function (:user-visible-flag t) nil [17223 17740])
            ("jabber-roster" package nil nil [17742 17766]))          
    :file "jabber-roster.el"
    :pointmax 17819
    :fsize 17826
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-presence.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-core" include nil nil [946 968])
            ("jabber-iq" include nil nil [969 989])
            ("jabber-alert" include nil nil [990 1013])
            ("jabber-util" include nil nil [1014 1036])
            ("jabber-menu" include nil nil [1037 1059])
            ("jabber-muc" include nil nil [1060 1081])
            ("jabber-presence-element-functions" variable nil nil [1083 1318])
            ("add-to-list" code nil nil [1320 1446])
            ("jabber-process-roster" function (:arguments ("xml-data" "closure-data")) nil [1447 4507])
            ("add-to-list" code nil nil [4509 4570])
            ("jabber-process-presence" function (:arguments ("xml-data")) nil [4571 7695])
            ("jabber-process-subscription-request" function (:arguments ("from" "presence-status")) nil [7697 8564])
            ("jabber-prioritize-resources" function (:arguments ("buddy")) nil [8566 9979])
            ("jabber-count-connected-resources" function (:arguments ("buddy")) nil [9981 10271])
            ("jabber-send-presence" function
               (:user-visible-flag t
                :arguments ("show" "status" "priority"))
                nil [10273 11404])
            ("jabber-presence-children" function nil nil [11406 11811])
            ("jabber-send-directed-presence" function
               (:user-visible-flag t
                :arguments ("jid" "type"))
                nil [11813 12531])
            ("jabber-send-away-presence" function
               (:user-visible-flag t
                :arguments ("&optional" "status"))
                nil [12533 12875])
            ("jabber-send-xa-presence" function
               (:user-visible-flag t
                :arguments ("&optional" "status"))
                nil [12877 13224])
            ("jabber-send-default-presence" function (:user-visible-flag t) nil [13226 13511])
            ("add-to-list" code nil nil [13513 13625])
            ("jabber-send-subscription-request" function
               (:user-visible-flag t
                :arguments ("to" "&optional" "request"))
                nil [13626 14056])
            ("add-to-list" code nil nil [14058 14156])
            ("jabber-roster-change" function
               (:user-visible-flag t
                :arguments ("jid" "name" "groups"))
                nil [14157 15166])
            ("add-to-list" code nil nil [15168 15262])
            ("jabber-roster-delete" function (:arguments ("jid")) nil [15263 15603])
            ("jabber-roster-delete-jid-at-point" function (:user-visible-flag t) nil [15605 15994])
            ("jabber-presence" package nil nil [15996 16022]))          
    :file "jabber-presence.el"
    :pointmax 16075
    :fsize 16074
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-util.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl" include nil nil [981 994])
            ("jabber-jid-history" variable nil nil [997 1056])
            ("cond" code nil nil [1058 1352])
            ("if" code nil nil [1404 1917])
            ("unless" code nil nil [1919 2092])
            ("if" code nil nil [2177 2571])
            ("unless" code nil nil [2573 2743])
            ("unless" code nil nil [2745 2894])
            ("if" code nil nil [2896 3210])
            ("cond" code nil nil [3212 3420])
            ("jabber-jid-username" function (:arguments ("string")) nil [3422 3605])
            ("jabber-jid-user" function (:arguments ("string")) nil [3607 3838])
            ("jabber-jid-server" function (:arguments ("string")) nil [3840 4001])
            ("jabber-jid-rostername" function (:arguments ("string")) nil [4003 4206])
            ("jabber-jid-displayname" function (:arguments ("string")) nil [4208 4443])
            ("jabber-jid-resource" function (:arguments ("string")) nil [4445 4644])
            ("jabber-jid-symbol" function (:arguments ("string")) nil [4646 4935])
            ("jabber-my-jid-p" function (:arguments ("jid")) nil [4937 5128])
            ("jabber-read-jid-completing" function (:arguments ("prompt" "&optional" "subset" "require-match" "default" "resource")) nil [5130 7570])
            ("jabber-read-node" function (:arguments ("prompt")) nil [7572 7854])
            ("jabber-read-passwd" function (:arguments ("&optional" "prompt")) nil [7856 8282])
            ("jabber-iq-query" function (:arguments ("xml-data")) nil [8284 8665])
            ("jabber-iq-error" function (:arguments ("xml-data")) nil [8667 8805])
            ("jabber-iq-xmlns" function (:arguments ("xml-data")) nil [8807 8984])
            ("jabber-x-delay" function (:arguments ("xml-data")) nil [8986 9417])
            ("jabber-parse-legacy-time" function (:arguments ("timestamp")) nil [9425 9948])
            ("jabber-encode-legacy-time" function (:arguments ("timestamp")) nil [9950 10390])
            ("jabber-encode-time" function (:arguments ("time")) nil [10396 10983])
            ("jabber-parse-time" function (:arguments ("time")) nil [10985 11912])
            ("jabber-report-success" function (:arguments ("xml-data" "context")) nil [11914 12386])
            ("jabber-error-messages" variable
               (:constant-flag t
                :default-value (list (cons (quote bad-request) "Bad request") (cons (quote conflict) "Conflict") (cons (quote feature-not-implemented) "Feature not implemented") (cons (quote forbidden) "Forbidden") (cons (quote gone) "Gone") (cons (quote internal-server-error) "Internal server error") (cons (quote item-not-found) "Item not found") (cons (quote jid-malformed) "JID malformed") (cons (quote not-acceptable) "Not acceptable") (cons (quote not-allowed) "Not allowed") (cons (quote not-authorized) "Not authorized") (cons (quote payment-required) "Payment required") (cons (quote recipient-unavailable) "Recipient unavailable") (cons (quote redirect) "Redirect") (cons (quote registration-required) "Registration required") (cons (quote remote-server-not-found) "Remote server not found") (cons (quote remote-server-timeout) "Remote server timeout") (cons (quote resource-constraint) "Resource constraint") (cons (quote service-unavailable) "Service unavailable") (cons (quote subscription-required) "Subscription required") (cons (quote undefined-condition) "Undefined condition") (cons (quote unexpected-request) "Unexpected request")))
                nil [12388 13501])
            ("jabber-legacy-error-messages" variable
               (:constant-flag t
                :default-value (list (cons 302 "Redirect") (cons 400 "Bad request") (cons 401 "Unauthorized") (cons 402 "Payment required") (cons 403 "Forbidden") (cons 404 "Not found") (cons 405 "Not allowed") (cons 406 "Not acceptable") (cons 407 "Registration required") (cons 408 "Request timeout") (cons 409 "Conflict") (cons 500 "Internal server error") (cons 501 "Not implemented") (cons 502 "Remote server error") (cons 503 "Service unavailable") (cons 504 "Remote server timeout") (cons 510 "Disconnected")))
                nil [13503 14133])
            ("jabber-parse-error" function (:arguments ("error-xml")) nil [14137 15193])
            ("jabber-error-condition" function (:arguments ("error-xml")) nil [15195 15538])
            ("jabber-stream-error-messages" variable (:default-value (list (cons (quote bad-format) "Bad XML format") (cons (quote bad-namespace-prefix) "Bad namespace prefix") (cons (quote conflict) "Conflict") (cons (quote connection-timeout) "Connection timeout") (cons (quote host-gone) "Host gone") (cons (quote host-unknown) "Host unknown") (cons (quote improper-addressing) "Improper addressing") (cons (quote internal-server-error) "Internal server error") (cons (quote invalid-from) "Invalid from") (cons (quote invalid-id) "Invalid id") (cons (quote invalid-namespace) "Invalid namespace") (cons (quote invalid-xml) "Invalid XML") (cons (quote not-authorized) "Not authorized") (cons (quote policy-violation) "Policy violation") (cons (quote remote-connection-failed) "Remote connection failed") (cons (quote resource-constraint) "Resource constraint") (cons (quote restricted-xml) "Restricted XML") (cons (quote see-other-host) "See other host") (cons (quote system-shutdown) "System shutdown") (cons (quote undefined-condition) "Undefined condition") (cons (quote unsupported-encoding) "Unsupported encoding") (cons (quote unsupported-stanza-type) "Unsupported stanza type") (cons (quote unsupported-version) "Unsupported version") (cons (quote xml-not-well-formed) "XML not well formed"))) nil [15540 16782])
            ("jabber-parse-stream-error" function (:arguments ("error-xml")) nil [16784 17634])
            ("put" code nil nil [17636 17705])
            ("put" code nil nil [17706 17765])
            ("jabber-signal-error" function (:arguments ("error-type" "condition" "&optional" "text" "app-specific")) nil [17767 18243])
            ("jabber-unhex" function (:arguments ("string")) nil [18245 18492])
            ("jabber-handle-uri" function
               (:user-visible-flag t
                :arguments ("uri" "&rest" "ignored-args"))
                nil [18494 20220])
            ("url-xmpp" function (:arguments ("url")) nil [20222 20451])
            ("jabber-util" package nil nil [20455 20477]))          
    :file "jabber-util.el"
    :pointmax 20530
    :fsize 20531
    :lastmodtime '(19097 15516)
    :unmatched-syntax '((close-paren 994 . 995) (symbol 963 . 980) (open-paren 962 . 963))
    )
   (semanticdb-table "jabber-alert.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-util" include nil nil [929 951])
            ("cl" include nil nil [953 966])
            ("jabber-alerts" customgroup (:user-visible-flag t) nil [968 1060])
            ("jabber-alert-message-hooks" variable (:default-value (quote (jabber-message-echo jabber-message-scroll))) nil [1062 1832])
            ("jabber-message-hooks" variable nil nil [1834 2032])
            ("jabber-alert-message-function" variable (:default-value (quote jabber-message-default-message)) nil [2034 2517])
            ("jabber-alert-muc-hooks" variable (:default-value (quote (jabber-muc-echo jabber-muc-scroll))) nil [2519 3185])
            ("jabber-muc-hooks" variable (:default-value (quote nil)) nil [3187 3381])
            ("jabber-alert-muc-function" variable (:default-value (quote jabber-muc-default-message)) nil [3383 3865])
            ("jabber-alert-presence-hooks" variable (:default-value (quote (jabber-presence-update-roster jabber-presence-echo))) nil [3867 4679])
            ("jabber-presence-hooks" variable (:default-value (quote (jabber-presence-watch))) nil [4681 4906])
            ("jabber-alert-presence-message-function" variable (:default-value (quote jabber-presence-default-message)) nil [4908 5453])
            ("jabber-alert-info-message-hooks" variable (:default-value (quote (jabber-info-display jabber-info-echo))) nil [5455 6104])
            ("jabber-info-message-hooks" variable (:default-value (quote nil)) nil [6106 6321])
            ("jabber-alert-info-message-function" variable (:default-value (quote jabber-info-default-message)) nil [6323 6611])
            ("jabber-info-message-alist" variable (:default-value (quote ((roster . "Roster display updated") (browse . "Browse request completed")))) nil [6613 6911])
            ("jabber-alert-message-wave" variable nil nil [6913 7126])
            ("jabber-alert-message-wave-alist" variable nil nil [7128 7383])
            ("jabber-alert-muc-wave" variable nil nil [7385 7511])
            ("jabber-alert-presence-wave" variable nil nil [7513 7641])
            ("jabber-alert-presence-wave-alist" variable nil nil [7643 7899])
            ("jabber-alert-info-wave" variable nil nil [7901 8035])
            ("define-jabber-alert" function (:arguments ("name" "docstring" "function")) nil [8037 9971])
            ("define-jabber-alert" code nil nil [9988 10084])
            ("define-jabber-alert" code nil nil [10085 10160])
            ("jabber-screen" include nil nil [10184 10208])
            ("jabber-ratpoison" include nil nil [10209 10236])
            ("jabber-sawfish" include nil nil [10237 10262])
            ("jabber-festival" include nil nil [10263 10289])
            ("jabber-xmessage" include nil nil [10290 10316])
            ("jabber-message-default-message" function (:arguments ("from" "buffer" "text")) nil [10341 10733])
            ("jabber-message-alert-same-buffer" variable (:default-value t) nil [10735 10887])
            ("jabber-muc-alert-self" variable nil nil [10889 11027])
            ("jabber-message-wave" function (:arguments ("from" "buffer" "text" "proposed-alert")) nil [11029 11502])
            ("jabber-message-display" function (:arguments ("from" "buffer" "text" "proposed-alert")) nil [11504 11676])
            ("jabber-message-switch" function (:arguments ("from" "buffer" "text" "proposed-alert")) nil [11678 11853])
            ("jabber-message-scroll" function (:arguments ("from" "buffer" "text" "proposed-alert")) nil [11855 12904])
            ("jabber-muc-default-message" function (:arguments ("nick" "group" "buffer" "text")) nil [12925 13360])
            ("jabber-muc-wave" function (:arguments ("nick" "group" "buffer" "text" "proposed-alert")) nil [13362 13553])
            ("jabber-muc-display" function (:arguments ("nick" "group" "buffer" "text" "proposed-alert")) nil [13555 13729])
            ("jabber-muc-switch" function (:arguments ("nick" "group" "buffer" "text" "proposed-alert")) nil [13731 13908])
            ("jabber-muc-scroll" function (:arguments ("nick" "group" "buffer" "text" "proposed-alert")) nil [13910 14077])
            ("jabber-presence-default-message" function (:arguments ("who" "oldstatus" "newstatus" "statustext")) nil [14103 15196])
            ("jabber-presence-wave" function (:arguments ("who" "oldstatus" "newstatus" "statustext" "proposed-alert")) nil [15198 15688])
            ("jabber-presence-display" function (:arguments ("who" "oldstatus" "newstatus" "statustext" "proposed-alert")) nil [15925 16104])
            ("jabber-presence-switch" function (:arguments ("who" "oldstatus" "newstatus" "statustext" "proposed-alert")) nil [16106 16288])
            ("jabber-info-default-message" function (:arguments ("infotype" "buffer")) nil [16312 16660])
            ("jabber-info-wave" function (:arguments ("infotype" "buffer" "proposed-alert")) nil [16662 16849])
            ("jabber-info-display" function (:arguments ("infotype" "buffer" "proposed-alert")) nil [16851 17003])
            ("jabber-info-switch" function (:arguments ("infotype" "buffer" "proposed-alert")) nil [17005 17160])
            ("jabber-alert" package nil nil [17162 17185]))          
    :file "jabber-alert.el"
    :pointmax 17238
    :fsize 17237
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-keymap.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("condition-case" code nil nil [982 1036])
            ("jabber-common-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote jabber-popup-chat-menu)) (define-key map "" (quote jabber-popup-roster-menu)) (define-key map "	" (quote jabber-popup-info-menu)) (define-key map "" (quote jabber-popup-muc-menu)) (define-key map "" (quote jabber-popup-service-menu)) (when (fboundp (quote forward-button)) (define-key map [9] (quote forward-button)) (define-key map [backtab] (quote backward-button))) map)) nil [1038 1625])
            ("jabber-global-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote jabber-connect)) (define-key map "" (quote jabber-disconnect)) (define-key map "" (quote jabber-switch-to-roster-buffer)) (define-key map "
" (quote jabber-chat-with)) (define-key map "" (quote jabber-send-away-presence)) (define-key map "" (quote jabber-send-default-presence)) (define-key map "" (quote jabber-send-xa-presence)) (define-key map "" (quote jabber-send-presence)) map)) nil [1627 2163])
            ("define-key" code nil nil [2165 2215])
            ("jabber-keymap" package nil nil [2217 2241]))          
    :file "jabber-keymap.el"
    :pointmax 2294
    :fsize 2293
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-time.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-iq" include nil nil [945 965])
            ("jabber-util" include nil nil [966 988])
            ("time-date" include nil nil [990 1010])
            ("add-to-list" code nil nil [1012 1092])
            ("jabber-get-time" function
               (:user-visible-flag t
                :arguments ("to"))
                nil [1093 1405])
            ("jabber-process-time" function (:arguments ("xml-data")) nil [1440 2127])
            ("jabber-get-last-online" function
               (:user-visible-flag t
                :arguments ("to"))
                nil [2223 2616])
            ("jabber-get-idle-time" function
               (:user-visible-flag t
                :arguments ("to"))
                nil [2618 2957])
            ("jabber-process-last" function (:arguments ("xml-data")) nil [2959 3907])
            ("add-to-list" code nil nil [3909 3993])
            ("add-to-list" code nil nil [3994 4052])
            ("jabber-return-time" function (:arguments ("xml-data")) nil [4053 4680])
            ("jabber-time" package nil nil [4682 4704]))          
    :file "jabber-time.el"
    :pointmax 4756
    :fsize 4755
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-keepalive.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-keepalive" customgroup (:user-visible-flag t) nil [1040 1142])
            ("jabber-keepalive-interval" variable (:default-value 600) nil [1144 1280])
            ("jabber-keepalive-timeout" variable (:default-value 20) nil [1282 1411])
            ("jabber-keepalive-timer" variable nil nil [1413 1488])
            ("jabber-keepalive-timeout-timer" variable nil nil [1490 1581])
            ("jabber-keepalive-start" function (:user-visible-flag t) nil [1583 1887])
            ("jabber-keepalive-stop" function (:user-visible-flag t) nil [1889 2081])
            ("jabber-keepalive-do" function nil nil [2083 2548])
            ("jabber-keepalive-got-response" function (:arguments ("&rest" "args")) nil [2550 2762])
            ("jabber-keepalive-timeout" function nil nil [2764 3033])
            ("jabber-keepalive" package nil nil [3035 3062]))          
    :file "jabber-keepalive.el"
    :pointmax 3115
    :fsize 3114
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-ft-client.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl" include nil nil [894 907])
            ("jabber-si-client" include nil nil [910 937])
            ("jabber-util" include nil nil [938 960])
            ("jabber-ft-common" include nil nil [962 989])
            ("jabber-ft-send" function
               (:user-visible-flag t
                :arguments ("jid" "filename" "desc"))
                nil [991 2057])
            ("jabber-ft-do-send" function (:arguments ("jid" "sid" "send-data-function" "filename")) nil [2059 2499])
            ("jabber-ft-client" package nil nil [2501 2528]))          
    :file "jabber-ft-client.el"
    :pointmax 2580
    :fsize 2579
    :lastmodtime '(19097 15516)
    :unmatched-syntax '((close-paren 907 . 908) (symbol 876 . 893) (open-paren 875 . 876))
    )
   (semanticdb-table "jabber-logon.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-xml" include nil nil [927 948])
            ("jabber-util" include nil nil [949 971])
            ("condition-case" code nil nil [1008 1075])
            ("jabber-get-auth" function (:arguments ("to")) nil [1077 1366])
            ("jabber-do-logon" function (:arguments ("xml-data" "closure-data")) nil [1368 2472])
            ("jabber-process-logon" function (:arguments ("xml-data" "closure-data")) nil [2474 2978])
            ("jabber-logon" package nil nil [2980 3003]))          
    :file "jabber-logon.el"
    :pointmax 3056
    :fsize 3055
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-chat.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-core" include nil nil [846 868])
            ("jabber-chatbuffer" include nil nil [869 897])
            ("jabber-history" include nil nil [898 923])
            ("ewoc" include nil nil [925 940])
            ("cl" include nil nil [960 973])
            ("jabber-chat" customgroup (:user-visible-flag t) nil [976 1042])
            ("jabber-chat-buffer-format" variable (:default-value "*-jabber-chat-%n-*") nil [1044 1366])
            ("jabber-chat-header-line-format" variable (:default-value (quote ("" (:eval (let ((buddy (jabber-jid-symbol jabber-chatting-with))) (jabber-propertize " " (quote display) (get buddy (quote avatar))))) (:eval (jabber-jid-displayname jabber-chatting-with)) "	" (:eval (let ((buddy (jabber-jid-symbol jabber-chatting-with))) (propertize (or (cdr (assoc (get buddy (quote show)) jabber-presence-strings)) (get buddy (quote show))) (quote face) (or (cdr (assoc (get buddy (quote show)) jabber-presence-faces)) (quote jabber-roster-user-online))))) "	" (:eval (jabber-fix-status (get (jabber-jid-symbol jabber-chatting-with) (quote status)))) "	" jabber-events-message))) nil [1368 2211])
            ("jabber-chat-time-format" variable (:default-value "%H:%M") nil [2213 2452])
            ("jabber-chat-delayed-time-format" variable (:default-value "%Y-%m-%d %H:%M") nil [2454 2702])
            ("jabber-print-rare-time" variable (:default-value t) nil [2704 2891])
            ("jabber-rare-time-format" variable (:default-value "%a %e %b %Y %H:00") nil [2893 3191])
            ("jabber-rare-time-face" variable
               (:default-value (quote ((t (:foreground "darkgreen" :underline t))))
                :type "face")
                nil [3193 3337])
            ("jabber-chat-local-prompt-format" variable (:default-value "[%t] %n> ") nil [3339 3727])
            ("jabber-chat-foreign-prompt-format" variable (:default-value "[%t] %n> ") nil [3729 4129])
            ("jabber-chat-system-prompt-format" variable (:default-value "[%t] *** ") nil [4131 4320])
            ("jabber-chat-prompt-local" variable
               (:default-value (quote ((t (:foreground "blue" :weight bold))))
                :type "face")
                nil [4322 4482])
            ("jabber-chat-prompt-foreign" variable
               (:default-value (quote ((t (:foreground "red" :weight bold))))
                :type "face")
                nil [4484 4643])
            ("jabber-chat-prompt-system" variable
               (:default-value (quote ((t (:foreground "green" :weight bold))))
                :type "face")
                nil [4645 4792])
            ("jabber-chat-text-local" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [4794 4891])
            ("jabber-chat-text-foreign" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [4893 4995])
            ("jabber-chat-error" variable
               (:default-value (quote ((t (:foreground "red" :weight bold))))
                :type "face")
                nil [4997 5121])
            ("jabber-chatting-with" variable nil nil [5123 5200])
            ("jabber-chat-printers" variable (:default-value (quote (jabber-chat-print-subject jabber-chat-print-body jabber-chat-print-url jabber-chat-goto-address))) nil [5202 5715])
            ("jabber-body-printers" variable (:default-value (quote (jabber-chat-normal-body))) nil [5717 6279])
            ("jabber-chat-send-hooks" variable nil nil [6281 6543])
            ("jabber-chat-earliest-backlog" variable nil nil [6545 6686])
            ("jabber-chat-get-buffer" function (:arguments ("chat-with")) nil [6688 7078])
            ("jabber-chat-create-buffer" function (:arguments ("chat-with")) nil [7080 8084])
            ("jabber-chat-insert-backlog-entry" function (:arguments ("msg")) nil [8086 9215])
            ("add-to-list" code nil nil [9217 9322])
            ("jabber-chat-display-more-backlog" function (:arguments ("how-many")) nil [9324 9883])
            ("add-to-list" code nil nil [9885 9941])
            ("jabber-process-chat" function (:arguments ("xml-data")) nil [9943 11222])
            ("jabber-chat-send" function (:arguments ("body")) nil [11224 11995])
            ("jabber-chat-pp" function (:arguments ("data")) nil [11997 14168])
            ("jabber-rare-time-needed" function (:arguments ("time1" "time2")) nil [14170 14414])
            ("jabber-message-time" function (:arguments ("entry")) nil [14416 14656])
            ("jabber-maybe-print-rare-time" function (:arguments ("node")) nil [14658 15128])
            ("jabber-chat-print-prompt" function (:arguments ("xml-data" "timestamp" "delayed")) nil [15130 16195])
            ("jabber-chat-system-prompt" function (:arguments ("timestamp")) nil [16197 16619])
            ("jabber-chat-self-prompt" function (:arguments ("timestamp" "delayed")) nil [16621 17397])
            ("jabber-chat-print-error" function (:arguments ("xml-data")) nil [17399 17692])
            ("jabber-chat-print-subject" function (:arguments ("xml-data" "who" "mode")) nil [17694 18157])
            ("jabber-chat-print-body" function (:arguments ("xml-data" "who" "mode")) nil [18159 18286])
            ("jabber-chat-normal-body" function (:arguments ("xml-data" "who" "mode")) nil [18288 19169])
            ("jabber-chat-print-url" function (:arguments ("xml-data" "who" "mode")) nil [19171 19848])
            ("jabber-chat-goto-address" function (:arguments ("&rest" "ignore")) nil [19850 19965])
            ("add-to-list" code nil nil [20012 20094])
            ("jabber-send-message" function
               (:user-visible-flag t
                :arguments ("to" "subject" "body" "type"))
                nil [20096 20887])
            ("add-to-list" code nil nil [20889 20968])
            ("jabber-chat-with" function
               (:user-visible-flag t
                :arguments ("jid" "&optional" "other-window"))
                nil [20970 21390])
            ("jabber-chat-with-jid-at-point" function
               (:user-visible-flag t
                :arguments ("&optional" "other-window"))
                nil [21392 21781])
            ("jabber-chat" package nil nil [21783 21805]))          
    :file "jabber-chat.el"
    :pointmax 21857
    :fsize 21856
    :lastmodtime '(19097 15516)
    :unmatched-syntax '((close-paren 973 . 974) (symbol 942 . 959) (open-paren 941 . 942))
    )
   (semanticdb-table "jabber-history.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-core" include nil nil [1419 1441])
            ("jabber-history" customgroup (:user-visible-flag t) nil [1443 1545])
            ("jabber-history-enabled" variable nil nil [1547 1673])
            ("jabber-use-global-history" variable (:default-value t) nil [1675 1983])
            ("jabber-history-dir" variable (:default-value "~/.emacs-jabber") nil [1985 2196])
            ("jabber-global-history-filename" variable (:default-value "~/.jabber_global_message_log") nil [2198 2408])
            ("jabber-history-enable-rotation" variable nil nil [2410 2770])
            ("jabber-history-size-limit" variable (:default-value 1024) nil [2772 3055])
            ("jabber-rotate-history-p" function (:arguments ("history-file")) nil [3058 3325])
            ("jabber-history-rotate" function (:arguments ("history-file" "&optional" "try")) nil [3327 3662])
            ("add-to-list" code nil nil [3664 3723])
            ("jabber-message-history" function (:arguments ("xml-data")) nil [3724 4345])
            ("add-hook" code nil nil [4347 4407])
            ("jabber-history-send-hook" function (:arguments ("body" "id")) nil [4409 4848])
            ("jabber-history-filename" function (:arguments ("contact")) nil [4850 5144])
            ("jabber-history-log-message" function (:arguments ("direction" "from" "to" "body" "timestamp")) nil [5146 6299])
            ("jabber-history-query" function (:arguments ("start-time" "end-time" "number" "direction" "jid-regexp" "history-file")) nil [6301 8037])
            ("jabber-backlog-days" variable (:default-value 3.0) nil [8039 8229])
            ("jabber-backlog-number" variable (:default-value 10) nil [8231 8355])
            ("jabber-history-backlog" function
               (:user-visible-flag t
                :arguments ("jid" "&optional" "before"))
                nil [8357 8999])
            ("jabber-history" package nil nil [9001 9026]))          
    :file "jabber-history.el"
    :pointmax 9078
    :fsize 9077
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-si-common.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-si-stream-methods" variable nil nil [860 1916])
            ("jabber-si-common" package nil nil [1918 1945]))          
    :file "jabber-si-common.el"
    :pointmax 2030
    :fsize 2029
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-register.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-iq" include nil nil [949 969])
            ("jabber-widget" include nil nil [970 994])
            ("add-to-list" code nil nil [996 1092])
            ("jabber-get-register" function
               (:user-visible-flag t
                :arguments ("to"))
                nil [1093 1439])
            ("jabber-process-register-or-search" function (:arguments ("xml-data")) nil [1441 3517])
            ("jabber-submit-register" function (:arguments ("&rest" "ignore")) nil [3519 4334])
            ("jabber-process-register-secondtime" function (:arguments ("xml-data" "closure-data")) nil [4336 4787])
            ("jabber-remove-register" function (:arguments ("&rest" "ignore")) nil [4789 5235])
            ("jabber-register" package nil nil [5237 5263]))          
    :file "jabber-register.el"
    :pointmax 5316
    :fsize 5315
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-xml.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("xml" include nil nil [923 937])
            ("jabber-util" include nil nil [938 960])
            ("jabber-escape-xml" function (:arguments ("str")) nil [962 1709])
            ("jabber-unescape-xml" function (:arguments ("str")) nil [1711 2262])
            ("jabber-sexp2xml" function (:arguments ("sexp")) nil [2264 3368])
            ("jabber-xml-skip-tag-forward" function nil nil [3370 4183])
            ("jabber-xml-node-name" function (:arguments ("node")) nil [4185 4327])
            ("jabber-xml-node-attributes" function (:arguments ("node")) nil [4329 4470])
            ("jabber-xml-node-children" function (:arguments ("node")) nil [4472 4739])
            ("jabber-xml-get-children" function (:arguments ("node" "child-name")) nil [4741 5083])
            ("if" code nil nil [5285 5751])
            ("jabber-xml-path" function (:arguments ("xml-data" "path")) nil [5754 6870])
            ("jabber-xml-let-attributes" function (:arguments ("attributes" "xml-data" "&rest" "body")) nil [6872 7134])
            ("jabber-xml" package nil nil [7136 7157]))          
    :file "jabber-xml.el"
    :pointmax 7210
    :fsize 7209
    :lastmodtime '(19097 15516)
    :unmatched-syntax '((close-paren 5751 . 5752) (symbol 5266 . 5282) (open-paren 5265 . 5266))
    )
   (semanticdb-table "jabber-vcard.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-core" include nil nil [2389 2411])
            ("jabber-widget" include nil nil [2412 2436])
            ("jabber-iq" include nil nil [2437 2457])
            ("jabber-avatar" include nil nil [2458 2482])
            ("jabber-vcard-photo" variable nil nil [2484 2580])
            ("make-variable-buffer-local" code nil nil [2581 2629])
            ("jabber-vcard-parse" function (:arguments ("vcard")) nil [2631 6439])
            ("jabber-vcard-reassemble" function (:arguments ("parsed")) nil [6441 8504])
            ("add-to-list" code nil nil [8513 8595])
            ("jabber-vcard-get" function
               (:user-visible-flag t
                :arguments ("jid"))
                nil [8597 8924])
            ("jabber-vcard-edit" function (:user-visible-flag t) nil [8926 9148])
            ("jabber-vcard-fields" variable
               (:constant-flag t
                :default-value (quote ((FN . "Full name") (NICKNAME . "Nickname") (BDAY . "Birthday") (URL . "URL") (JABBERID . "JID") (MAILER . "User agent") (TZ . "Time zone") (TITLE . "Title") (ROLE . "Role") (REV . "Last changed") (DESC . "Description") (NOTE . "Note"))))
                nil [9150 9462])
            ("jabber-vcard-name-fields" variable
               (:constant-flag t
                :default-value (quote ((PREFIX . "Prefix") (GIVEN . "Given name") (MIDDLE . "Middle name") (FAMILY . "Family name") (SUFFIX . "Suffix"))))
                nil [9464 9651])
            ("jabber-vcard-phone-types" variable
               (:constant-flag t
                :default-value (quote ((HOME . "Home") (WORK . "Work") (VOICE . "Voice") (FAX . "Fax") (PAGER . "Pager") (MSG . "Message") (CELL . "Cell phone") (VIDEO . "Video") (BBS . "BBS") (MODEM . "Modem") (ISDN . "ISDN") (PCS . "PCS"))))
                nil [9653 9992])
            ("jabber-vcard-email-types" variable
               (:constant-flag t
                :default-value (quote ((HOME . "Home") (WORK . "Work") (INTERNET . "Internet") (X400 . "X400") (PREF . "Preferred"))))
                nil [9994 10161])
            ("jabber-vcard-address-types" variable
               (:constant-flag t
                :default-value (quote ((HOME . "Home") (WORK . "Work") (POSTAL . "Postal") (PARCEL . "Parcel") (DOM . "Domestic") (INTL . "International") (PREF . "Preferred"))))
                nil [10163 10406])
            ("jabber-vcard-address-fields" variable
               (:constant-flag t
                :default-value (quote ((POBOX . "Post box") (EXTADD . "Ext. address") (STREET . "Street") (LOCALITY . "Locality") (REGION . "Region") (PCODE . "Post code") (CTRY . "Country"))))
                nil [10408 10631])
            ("jabber-vcard-display" function (:arguments ("xml-data")) nil [10633 13051])
            ("jabber-vcard-do-edit" function (:arguments ("xml-data" "closure-data")) nil [13053 17502])
            ("jabber-vcard-submit" function (:arguments ("&rest" "ignore")) nil [17504 18032])
            ("jabber-vcard" package nil nil [18034 18057]))          
    :file "jabber-vcard.el"
    :pointmax 18108
    :fsize 18107
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-export.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl" include nil nil [853 866])
            ("jabber-export-roster-widget" variable nil nil [868 908])
            ("jabber-import-subscription-p-widget" variable nil nil [910 958])
            ("jabber-export-roster" function
               (:user-visible-flag t
                :arguments ("&optional" "roster"))
                nil [960 1907])
            ("jabber-import-roster" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [1909 3125])
            ("jabber-export-remove-regexp" function (:arguments ("&rest" "ignore")) nil [3127 3566])
            ("jabber-export-save" function (:arguments ("&rest" "ignore")) nil [3568 4038])
            ("jabber-import-doit" function (:arguments ("&rest" "ignore")) nil [4040 6165])
            ("jabber-roster-to-sexp" function (:arguments ("roster")) nil [6167 6492])
            ("jabber-roster-sexp-to-xml" function (:arguments ("sexp" "&optional" "omit-subscription")) nil [6494 6885])
            ("jabber-roster-xml-to-sexp" function (:arguments ("xml-data")) nil [6887 7574])
            ("jabber-export-display" function (:arguments ("roster")) nil [7576 7962])
            ("jabber-export" package nil nil [7964 7988]))          
    :file "jabber-export.el"
    :pointmax 8041
    :fsize 8040
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("when" code nil nil [1069 1156])
            ("jabber" customgroup (:user-visible-flag t) nil [1203 1274])
            ("jabber-username" variable (:default-value "emacs") nil [1276 1384])
            ("jabber-server" variable (:default-value "magaf.org") nil [1386 1497])
            ("jabber-password" variable nil nil [1499 1667])
            ("jabber-resource" variable (:default-value "emacs") nil [1669 1758])
            ("jabber-default-show" variable nil nil [1760 2015])
            ("jabber-default-status" variable nil nil [2017 2112])
            ("jabber-default-priority" variable (:default-value 10) nil [2114 2207])
            ("jabber-nickname" variable (:default-value jabber-username) nil [2209 2370])
            ("jabber-util" include nil nil [2405 2427])
            ("jabber-menu" include nil nil [2428 2450])
            ("jabber-xml" include nil nil [2451 2472])
            ("jabber-conn" include nil nil [2473 2495])
            ("jabber-core" include nil nil [2496 2518])
            ("jabber-logon" include nil nil [2519 2542])
            ("jabber-roster" include nil nil [2543 2567])
            ("jabber-presence" include nil nil [2568 2594])
            ("jabber-alert" include nil nil [2595 2618])
            ("jabber-chat" include nil nil [2619 2641])
            ("jabber-disco" include nil nil [2642 2665])
            ("jabber-iq" include nil nil [2666 2686])
            ("jabber-widget" include nil nil [2687 2711])
            ("jabber-register" include nil nil [2712 2738])
            ("jabber-search" include nil nil [2739 2763])
            ("jabber-browse" include nil nil [2764 2788])
            ("jabber-muc" include nil nil [2789 2810])
            ("jabber-version" include nil nil [2811 2836])
            ("jabber-ahc-presence" include nil nil [2837 2867])
            ("jabber-modeline" include nil nil [2868 2894])
            ("jabber-keepalive" include nil nil [2895 2922])
            ("jabber-watch" include nil nil [2923 2946])
            ("jabber-activity" include nil nil [2947 2973])
            ("jabber-vcard" include nil nil [2974 2997])
            ("jabber-events" include nil nil [2998 3022])
            ("jabber-vcard-avatars" include nil nil [3023 3054])
            ("jabber-autoaway" include nil nil [3055 3081])
            ("jabber-time" include nil nil [3082 3104])
            ("jabber-ft-client" include nil nil [3106 3133])
            ("jabber-ft-server" include nil nil [3134 3161])
            ("jabber-socks5" include nil nil [3162 3186])
            ("jabber-export-roster" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3220 3335])
            ("jabber-import-roster" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3336 3435])
            ("jabber-compose" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3436 3535])
            ("jabber-private-get" function (:prototype-flag t) nil [3536 3855])
            ("jabber-private-set" function (:prototype-flag t) nil [3856 4063])
            ("*jabber-current-status*" variable nil nil [4065 4137])
            ("*jabber-current-show*" variable nil nil [4139 4208])
            ("*jabber-current-priority*" variable (:default-value 10) nil [4210 4279])
            ("*jabber-status-history*" variable nil nil [4281 4348])
            ("jabber-faces" customgroup (:user-visible-flag t) nil [4350 4442])
            ("jabber-title-small" variable
               (:default-value (quote ((t (:weight bold :width semi-expanded :height 1.0 :inherit variable-pitch))))
                :type "face")
                nil [4444 4602])
            ("jabber-title-medium" variable
               (:default-value (quote ((t (:weight bold :width expanded :height 2.0 :inherit variable-pitch))))
                :type "face")
                nil [4604 4759])
            ("jabber-title-large" variable
               (:default-value (quote ((t (:weight bold :width ultra-expanded :height 3.0 :inherit variable-pitch))))
                :type "face")
                nil [4761 4920])
            ("jabber-debug" customgroup (:user-visible-flag t) nil [4922 4986])
            ("jabber-debug-log-xml" variable nil nil [4988 5106])
            ("jabber-presence-faces" variable
               (:constant-flag t
                :default-value (quote (("" . jabber-roster-user-online) ("away" . jabber-roster-user-away) ("xa" . jabber-roster-user-xa) ("dnd" . jabber-roster-user-dnd) ("chat" . jabber-roster-user-chatty) ("error" . jabber-roster-user-error) (nil . jabber-roster-user-offline))))
                nil [5108 5443])
            ("jabber-presence-strings" variable
               (:constant-flag t
                :default-value (quote (("" . "Online") ("away" . "Away") ("xa" . "Extended Away") ("dnd" . "Do not Disturb") ("chat" . "Chatty") ("error" . "Error") (nil . "Offline"))))
                nil [5445 5704])
            ("jabber-customize" function (:user-visible-flag t) nil [5706 5806])
            ("jabber-info" function (:user-visible-flag t) nil [5808 5890])
            ("jabber" package nil nil [5892 5909]))          
    :file "jabber.el"
    :pointmax 5962
    :fsize 5961
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-iq.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-core" include nil nil [928 950])
            ("jabber-util" include nil nil [951 973])
            ("jabber-keymap" include nil nil [974 998])
            ("*jabber-open-info-queries*" variable nil nil [1000 1098])
            ("jabber-iq-get-xmlns-alist" variable nil nil [1100 1201])
            ("jabber-iq-set-xmlns-alist" variable nil nil [1203 1304])
            ("jabber-browse-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map jabber-common-keymap) (define-key map [mouse-2] (quote jabber-popup-combined-menu)) map)) nil [1306 1491])
            ("jabber-browse-mode-hook" variable nil nil [1493 1603])
            ("jabber-browse-mode" function nil nil [1605 1957])
            ("put" code nil nil [1959 2005])
            ("add-to-list" code nil nil [2007 2056])
            ("jabber-process-iq" function (:arguments ("xml-data")) nil [2057 3609])
            ("jabber-send-iq" function (:arguments ("to" "type" "query" "success-callback" "success-closure-data" "error-callback" "error-closure-data" "&optional" "result-id")) nil [3611 4891])
            ("jabber-send-iq-error" function (:arguments ("to" "id" "original-query" "error-type" "condition" "&optional" "text" "app-specific")) nil [4893 5850])
            ("jabber-process-data" function (:arguments ("xml-data" "closure-data")) nil [5852 7090])
            ("jabber-iq" package nil nil [7092 7112]))          
    :file "jabber-iq.el"
    :pointmax 7165
    :fsize 7164
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-widget.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("widget" include nil nil [943 960])
            ("wid-edit" include nil nil [961 980])
            ("jabber-util" include nil nil [981 1003])
            ("jabber-disco" include nil nil [1004 1027])
            ("jabber-widget-alist" variable nil nil [1029 1097])
            ("jabber-form-type" variable nil nil [1099 1240])
            ("jabber-submit-to" variable nil nil [1242 1326])
            ("add-to-list" code nil nil [1328 1385])
            ("define-widget" code nil nil [1387 1792])
            ("jid-complete" function (:user-visible-flag t) nil [1794 2801])
            ("jabber-init-widget-buffer" function (:arguments ("submit-to")) nil [2804 3318])
            ("jabber-render-register-form" function (:arguments ("query")) nil [3320 5133])
            ("jabber-parse-register-form" function nil nil [5135 5414])
            ("jabber-render-xdata-form" function (:arguments ("x" "&optional" "defaults")) nil [5416 8626])
            ("jabber-parse-xdata-form" function nil nil [8628 9171])
            ("jabber-xdata-value-convert" function (:arguments ("value" "type")) nil [9173 9662])
            ("jabber-render-xdata-search-results" function (:arguments ("xdata")) nil [9664 10104])
            ("jabber-render-xdata-search-results-multi" function (:arguments ("xdata")) nil [10106 12238])
            ("jabber-render-xdata-search-results-single" function (:arguments ("xdata")) nil [12240 12793])
            ("jabber-xdata-formtype" function (:arguments ("x")) nil [12795 13265])
            ("jabber-widget" package nil nil [13267 13291]))          
    :file "jabber-widget.el"
    :pointmax 13344
    :fsize 13343
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-conn.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl" include nil nil [1090 1103])
            ("or" code nil nil [1180 1250])
            ("ignore-errors" code nil nil [1252 1287])
            ("srv" include nil nil [1289 1303])
            ("*jabber-connection*" variable nil nil [1507 1587])
            ("jabber-conn" customgroup (:user-visible-flag t) nil [1589 1661])
            ("jabber-network-server" variable nil nil [1663 1910])
            ("jabber-port" variable nil nil [1912 2158])
            ("jabber-connection-type" variable (:default-value (cond ((and (featurep (quote starttls)) (or (and (bound-and-true-p starttls-gnutls-program) (executable-find starttls-gnutls-program)) (and (bound-and-true-p starttls-program) (executable-find starttls-program)))) (quote starttls)) (t (quote network)))) nil [2160 2832])
            ("jabber-connection-ssl-program" variable nil nil [2834 3251])
            ("jabber-connect-methods" variable (:default-value (quote ((network jabber-network-connect jabber-network-send) (starttls jabber-starttls-connect jabber-ssl-send) (ssl jabber-ssl-connect jabber-ssl-send)))) nil [3253 3603])
            ("jabber-connect-function" variable nil nil [3605 3689])
            ("jabber-conn-send-function" variable nil nil [3691 3774])
            ("jabber-setup-connect-method" function nil nil [3776 3985])
            ("jabber-srv-targets" function nil nil [3987 4441])
            ("jabber-network-connect" function nil nil [4470 4944])
            ("jabber-network-send" function (:arguments ("string")) nil [4946 5103])
            ("jabber-ssl-connect" function nil nil [5221 5947])
            ("jabber-ssl-send" function (:arguments ("string")) nil [5949 6203])
            ("jabber-starttls-connect" function nil nil [6205 6829])
            ("jabber-starttls-initiate" function nil nil [6831 7051])
            ("jabber-starttls-process-input" function (:arguments ("xml-data")) nil [7053 7804])
            ("jabber-conn" package nil nil [7806 7828]))          
    :file "jabber-conn.el"
    :pointmax 7879
    :fsize 7878
    :lastmodtime '(19097 15516)
    :unmatched-syntax '((close-paren 1103 . 1104) (symbol 1072 . 1089) (open-paren 1071 . 1072))
    )
   (semanticdb-table "jabber-private.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-private-get" function (:arguments ("node-name" "namespace" "success-callback" "error-callback")) nil [859 1466])
            ("jabber-private-get-1" function (:arguments ("xml-data" "success-callback")) nil [1468 1620])
            ("jabber-private-set" function (:arguments ("fragment" "&optional" "success-callback" "success-closure-data" "error-callback" "error-closure-data")) nil [1622 2081])
            ("jabber-private" package nil nil [2083 2108]))          
    :file "jabber-private.el"
    :pointmax 2160
    :fsize 2159
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-ft-server.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-si-server" include nil nil [959 986])
            ("jabber-util" include nil nil [987 1009])
            ("jabber-ft-sessions" variable nil nil [1011 1116])
            ("jabber-ft-size" variable nil nil [1118 1191])
            ("add-to-list" code nil nil [1193 1288])
            ("add-to-list" code nil nil [1290 1446])
            ("jabber-ft-accept" function (:arguments ("xml-data")) nil [1448 3525])
            ("jabber-ft-server-connected" function (:arguments ("jid" "sid" "send-data-function")) nil [3527 3893])
            ("jabber-ft-data" function (:arguments ("jid" "sid" "data")) nil [3895 4522])
            ("jabber-ft-server" package nil nil [4524 4551]))          
    :file "jabber-ft-server.el"
    :pointmax 4604
    :fsize 4603
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-ahc-presence.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-ahc" include nil nil [953 974])
            ("jabber-ahc-presence-node" variable
               (:constant-flag t
                :default-value "http://jabber.org/protocol/rc#set-status")
                nil [976 1091])
            ("jabber-ahc-add" code nil nil [1093 1189])
            ("jabber-ahc-presence" function (:arguments ("xml-data")) nil [1191 4173])
            ("jabber-ahc-presence" package nil nil [4175 4205]))          
    :file "jabber-ahc-presence.el"
    :pointmax 4258
    :fsize 4257
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-muc.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-chat" include nil nil [932 954])
            ("jabber-widget" include nil nil [955 979])
            ("jabber-newdisco" include nil nil [980 1006])
            ("cl" include nil nil [1008 1021])
            ("*jabber-active-groupchats*" variable nil nil [1023 1164])
            ("jabber-pending-groupchats" variable (:default-value (make-hash-table)) nil [1166 1411])
            ("jabber-muc-participants" variable nil nil [1413 1572])
            ("jabber-group" variable nil nil [1574 1642])
            ("jabber-muc-topic" variable nil nil [1644 1711])
            ("jabber-muc-default-nicknames" variable nil nil [1713 1922])
            ("jabber-muc-autojoin" variable nil nil [1924 2086])
            ("jabber-muc-disable-disco-check" variable nil nil [2088 2445])
            ("jabber-groupchat-buffer-format" variable (:default-value "*-jabber-groupchat-%n-*") nil [2447 2779])
            ("jabber-groupchat-prompt-format" variable (:default-value "[%t] %n> ") nil [2781 3087])
            ("jabber-muc-header-line-format" variable (:default-value (quote (" " (:eval (jabber-jid-displayname jabber-group)) "	" jabber-muc-topic))) nil [3089 3373])
            ("jabber-muc-private-buffer-format" variable (:default-value "*-jabber-muc-priv-%g-%n-*") nil [3375 3698])
            ("jabber-muc-private-foreign-prompt-format" variable (:default-value "[%t] %g/%n> ") nil [3700 4056])
            ("jabber-muc-private-header-line-format" variable (:default-value (quote (" " (:eval (jabber-jid-resource jabber-chatting-with)) " in " (:eval (jabber-jid-displayname (jabber-jid-user jabber-chatting-with))) "	" jabber-events-message))) nil [4058 4456])
            ("jabber-muc-printers" variable (:default-value (quote nil)) nil [4458 4619])
            ("jabber-muc-get-buffer" function (:arguments ("group")) nil [4621 4931])
            ("jabber-muc-create-buffer" function (:arguments ("group")) nil [4933 5433])
            ("jabber-muc-private-get-buffer" function (:arguments ("group" "nickname")) nil [5435 5770])
            ("jabber-muc-private-create-buffer" function (:arguments ("group" "nickname")) nil [5772 6319])
            ("jabber-muc-send" function (:arguments ("body")) nil [6321 6627])
            ("jabber-muc-add-groupchat" function (:arguments ("group" "nickname")) nil [6629 6914])
            ("jabber-muc-remove-groupchat" function (:arguments ("group")) nil [6916 7300])
            ("jabber-muc-participant-plist" function (:arguments ("group" "nickname")) nil [7302 7603])
            ("jabber-muc-modify-participant" function (:arguments ("group" "nickname" "new-plist")) nil [7605 8252])
            ("jabber-muc-report-delta" function (:arguments ("nickname" "old-plist" "new-plist" "reason" "actor")) nil [8254 11189])
            ("jabber-muc-remove-participant" function (:arguments ("group" "nickname")) nil [11191 11508])
            ("jabber-muc-read-completing" function (:arguments ("prompt" "&optional" "allow-not-joined")) nil [11510 12064])
            ("jabber-muc-read-nickname" function (:arguments ("group" "prompt")) nil [12066 12336])
            ("add-to-list" code nil nil [12338 12433])
            ("jabber-groupchat-get-config" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [12434 12805])
            ("jabber-groupchat-render-config" function (:arguments ("xml-data")) nil [12807 13530])
            ("jabber-groupchat-submit-config" function (:arguments ("&rest" "ignore")) nil [13532 13859])
            ("jabber-groupchat-cancel-config" function (:arguments ("&rest" "ignore")) nil [13861 14135])
            ("add-to-list" code nil nil [14137 14224])
            ("jabber-groupchat-join" function
               (:user-visible-flag t
                :arguments ("group" "nickname" "&optional" "popup"))
                nil [14226 14982])
            ("jabber-groupchat-join-2" function (:arguments ("closure" "result")) nil [14984 16214])
            ("jabber-groupchat-join-3" function (:arguments ("group" "nickname" "password" "popup")) nil [16216 17120])
            ("jabber-muc-read-my-nickname" function (:arguments ("group")) nil [17122 17442])
            ("add-to-list" code nil nil [17444 17526])
            ("defalias" code nil nil [17528 17578])
            ("add-to-list" code nil nil [17580 17669])
            ("jabber-groupchat-leave" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [17671 18040])
            ("add-to-list" code nil nil [18042 18127])
            ("jabber-muc-names" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [18129 18729])
            ("jabber-muc-print-names" function (:arguments ("participants")) nil [18731 19166])
            ("add-to-list" code nil nil [19168 19249])
            ("jabber-muc-set-topic" function
               (:user-visible-flag t
                :arguments ("group" "topic"))
                nil [19251 19537])
            ("jabber-muc-snarf-topic" function (:arguments ("xml-data")) nil [19539 19764])
            ("add-to-list" code nil nil [19766 19863])
            ("jabber-muc-set-role" function
               (:user-visible-flag t
                :arguments ("group" "nickname" "role" "reason"))
                nil [19865 20645])
            ("add-to-list" code nil nil [20647 20761])
            ("jabber-muc-set-affiliation" function
               (:user-visible-flag t
                :arguments ("group" "nickname-or-jid" "nickname-p" "affiliation" "reason"))
                nil [20763 22238])
            ("add-to-list" code nil nil [22240 22335])
            ("jabber-muc-invite" function
               (:user-visible-flag t
                :arguments ("jid" "group" "reason"))
                nil [22337 22783])
            ("add-to-list" code nil nil [22785 22845])
            ("jabber-muc-print-invite" function (:arguments ("xml-data" "who" "mode")) nil [22847 24902])
            ("jabber-muc-autojoin" function (:user-visible-flag t) nil [24904 25165])
            ("jabber-muc-message-p" function (:arguments ("message")) nil [25167 25847])
            ("jabber-muc-sender-p" function (:arguments ("jid")) nil [25849 26043])
            ("jabber-muc-private-message-p" function (:arguments ("message")) nil [26045 26345])
            ("add-to-list" code nil nil [26347 26434])
            ("jabber-muc-private" function
               (:user-visible-flag t
                :arguments ("group" "nickname"))
                nil [26436 26758])
            ("jabber-muc-presence-p" function (:arguments ("presence")) nil [26760 27391])
            ("jabber-muc-parse-affiliation" function (:arguments ("x-muc")) nil [27393 27744])
            ("jabber-muc-print-prompt" function (:arguments ("xml-data" "&optional" "local")) nil [27746 28664])
            ("jabber-muc-private-print-prompt" function (:arguments ("xml-data")) nil [28666 29532])
            ("jabber-muc-system-prompt" function (:arguments ("&rest" "ignore")) nil [29534 29952])
            ("add-to-list" code nil nil [29954 30017])
            ("jabber-muc-process-message" function (:arguments ("xml-data")) nil [30019 31255])
            ("jabber-muc-process-presence" function (:arguments ("presence")) nil [31257 35292])
            ("jabber-muc" package nil nil [35301 35322]))          
    :file "jabber-muc.el"
    :pointmax 35375
    :fsize 35374
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-disco.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-iq" include nil nil [1202 1222])
            ("jabber-xml" include nil nil [1223 1244])
            ("jabber-menu" include nil nil [1245 1267])
            ("jabber-advertised-features" variable (:default-value (list "http://jabber.org/protocol/disco#info")) nil [1335 1473])
            ("jabber-disco-items-nodes" variable (:default-value (list (list "" nil nil))) nil [1475 2193])
            ("jabber-disco-info-nodes" variable (:default-value (list (list "" (function jabber-disco-return-client-info) nil))) nil [2195 2980])
            ("jabber-process-disco-info" function (:arguments ("xml-data")) nil [2982 3833])
            ("jabber-process-disco-items" function (:arguments ("xml-data")) nil [3835 4465])
            ("add-to-list" code nil nil [4467 4586])
            ("add-to-list" code nil nil [4587 4707])
            ("jabber-return-disco-info" function (:arguments ("xml-data")) nil [4708 5859])
            ("jabber-disco-return-client-info" function (:arguments ("xml-data")) nil [5861 6307])
            ("add-to-list" code nil nil [6310 6407])
            ("jabber-get-disco-items" function
               (:user-visible-flag t
                :arguments ("to" "&optional" "node"))
                nil [6408 6936])
            ("add-to-list" code nil nil [6938 7033])
            ("jabber-get-disco-info" function
               (:user-visible-flag t
                :arguments ("to" "&optional" "node"))
                nil [7034 7557])
            ("jabber-disco" package nil nil [7559 7582]))          
    :file "jabber-disco.el"
    :pointmax 7635
    :fsize 7634
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-newdisco.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-disco-info-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [1037 1100])
            ("jabber-disco-items-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [1223 1287])
            ("jabber-disco-get-info" function (:arguments ("jid" "node" "callback" "closure-data" "&optional" "force")) nil [1299 2452])
            ("jabber-disco-got-info" function (:arguments ("xml-data" "callback-data")) nil [2454 3211])
            ("jabber-disco-get-info-immediately" function (:arguments ("jid" "node")) nil [3213 3440])
            ("jabber-disco-get-items" function (:arguments ("jid" "node" "callback" "closure-data" "&optional" "force")) nil [3453 4604])
            ("jabber-disco-got-items" function (:arguments ("xml-data" "callback-data")) nil [4606 5205])
            ("jabber-disco-get-items-immediately" function (:arguments ("jid" "node")) nil [5207 5313])
            ("jabber-disco-publish" function (:arguments ("node" "item-name" "item-jid" "item-node")) nil [5328 5823])
            ("jabber-disco-publish-remove" function (:arguments ("node" "item-jid" "item-node")) nil [5825 6269])
            ("jabber-newdisco" package nil nil [6271 6297]))          
    :file "jabber-newdisco.el"
    :pointmax 6349
    :fsize 6348
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-sawfish.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-sawfish-display-time" variable (:default-value 3) nil [855 1025])
            ("jabber-sawfish-display-message" function (:arguments ("message")) nil [1027 1394])
            ("define-jabber-alert" code nil nil [1396 1514])
            ("jabber-sawfish" package nil nil [1516 1541]))          
    :file "jabber-sawfish.el"
    :pointmax 1592
    :fsize 1591
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-search.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-register" include nil nil [955 981])
            ("add-to-list" code nil nil [983 1072])
            ("jabber-get-search" function
               (:user-visible-flag t
                :arguments ("to"))
                nil [1073 1430])
            ("jabber-submit-search" function (:arguments ("&rest" "ignore")) nil [1750 2417])
            ("jabber-process-search-result" function (:arguments ("xml-data")) nil [2419 4127])
            ("jabber-search" package nil nil [4129 4153]))          
    :file "jabber-search.el"
    :pointmax 4206
    :fsize 4205
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-screen.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-screen-message" function (:arguments ("msg")) nil [864 976])
            ("define-jabber-alert" code nil nil [978 1084])
            ("jabber-screen" package nil nil [1086 1110]))          
    :file "jabber-screen.el"
    :pointmax 1161
    :fsize 1160
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "srv.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("dns" include nil nil [1056 1070])
            ("cl" include nil nil [1090 1103])
            ("srv-lookup" function (:arguments ("target")) nil [1106 3404])
            ("srv" package nil nil [3406 3420]))          
    :file "srv.el"
    :pointmax 3492
    :fsize 3491
    :lastmodtime '(19097 15516)
    :unmatched-syntax '((close-paren 1103 . 1104) (symbol 1072 . 1089) (open-paren 1071 . 1072))
    )
   (semanticdb-table "jabber-core.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl" include nil nil [1028 1041])
            ("jabber-util" include nil nil [1044 1066])
            ("jabber-logon" include nil nil [1067 1090])
            ("jabber-conn" include nil nil [1091 1113])
            ("condition-case" code nil nil [1160 1225])
            ("*jabber-roster*" variable nil nil [1228 1276])
            ("jabber-jid-obarray" variable (:default-value (make-vector 127 0)) nil [1278 1354])
            ("*jabber-connected*" variable nil nil [1356 1418])
            ("*jabber-authenticated*" variable nil nil [1420 1490])
            ("*jabber-encrypted*" variable nil nil [1492 1565])
            ("*jabber-disconnecting*" variable nil nil [1567 1668])
            ("*xmlq*" variable nil nil [1670 1756])
            ("jabber-register-p" variable nil nil [1758 1832])
            ("jabber-session-id" variable nil nil [1834 1894])
            ("jabber-stream-version" variable nil nil [1896 1969])
            ("jabber-register-p" variable nil nil [1971 2056])
            ("jabber-call-on-connection" variable nil nil [2058 2223])
            ("jabber-short-circuit-input" variable nil nil [2225 2361])
            ("jabber-message-chain" variable nil nil [2363 2457])
            ("jabber-iq-chain" variable nil nil [2459 2551])
            ("jabber-presence-chain" variable nil nil [2553 2662])
            ("jabber-stream-error-chain" variable (:default-value (quote (jabber-process-stream-error))) nil [2664 2785])
            ("jabber-choked-count" variable nil nil [2787 2891])
            ("jabber-choked-timer" variable nil nil [2893 2925])
            ("jabber-core" customgroup (:user-visible-flag t) nil [2927 3001])
            ("jabber-post-connect-hook" variable
               (:user-visible-flag t
                :default-value (quote (jabber-send-default-presence jabber-muc-autojoin)))
                nil [3003 3200])
            ("jabber-pre-disconnect-hook" variable (:user-visible-flag t) nil [3202 3408])
            ("jabber-lost-connection-hook" variable (:user-visible-flag t) nil [3410 3536])
            ("jabber-post-disconnect-hook" variable (:user-visible-flag t) nil [3538 3652])
            ("jabber-roster-buffer" variable (:default-value "*-jabber-*") nil [3654 3771])
            ("jabber-process-buffer" variable (:default-value " *-jabber-process-*") nil [3773 3860])
            ("jabber-use-sasl" variable (:default-value t) nil [3862 4141])
            ("jabber-have-sasl-p" function nil nil [4143 4263])
            ("jabber-connect" function
               (:user-visible-flag t
                :arguments ("&optional" "registerp"))
                nil [4265 6380])
            ("jabber-auth-somehow" function (:arguments ("stream-features")) nil [6382 6853])
            ("jabber-disconnect" function (:user-visible-flag t) nil [6855 7540])
            ("jabber-disconnected" function nil nil [7542 8213])
            ("jabber-sentinel" function (:arguments ("process" "event")) nil [8215 8670])
            ("jabber-pre-filter" function (:arguments ("process" "string")) nil [8672 8931])
            ("jabber-filter" function (:arguments ("process")) nil [8933 12461])
            ("jabber-reset-choked" function nil nil [12463 12524])
            ("jabber-check-choked" function nil nil [12526 13068])
            ("jabber-choked-bail-out" function nil nil [13070 13936])
            ("jabber-process-input" function (:arguments ("xml-data")) nil [13938 14959])
            ("jabber-process-stream-error" function (:arguments ("xml-data")) nil [14961 15204])
            ("jabber-bind-and-establish-session" function (:arguments ("xml-data")) nil [15206 15929])
            ("jabber-process-bind" function (:arguments ("xml-data" "successp")) nil [15931 16690])
            ("jabber-process-session" function (:arguments ("xml-data" "successp")) nil [16692 17095])
            ("jabber-clear-roster" function nil nil [17097 17352])
            ("jabber-send-sexp" function (:arguments ("sexp")) nil [17354 17835])
            ("jabber-core" package nil nil [17837 17859]))          
    :file "jabber-core.el"
    :pointmax 17912
    :fsize 17911
    :lastmodtime '(19097 15516)
    :unmatched-syntax '((close-paren 1225 . 1226) (symbol 1141 . 1157) (open-paren 1140 . 1141) (close-paren 1041 . 1042) (symbol 1010 . 1027) (open-paren 1009 . 1010))
    )
   (semanticdb-table "jabber-compose.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-compose" function
               (:user-visible-flag t
                :arguments ("&optional" "recipient"))
                nil [906 2114])
            ("jabber-compose-send" function (:arguments ("&rest" "ignore")) nil [2116 2566])
            ("jabber-compose" package nil nil [2568 2593]))          
    :file "jabber-compose.el"
    :pointmax 2644
    :fsize 2643
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-si-client.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-iq" include nil nil [868 888])
            ("jabber-feature-neg" include nil nil [889 918])
            ("jabber-si-common" include nil nil [920 947])
            ("jabber-si-initiate" function (:arguments ("jid" "profile-namespace" "profile-data" "profile-function" "&optional" "mime-type")) nil [949 2011])
            ("jabber-si-initiate-process" function (:arguments ("xml-data" "closure-data")) nil [2013 2693])
            ("jabber-si-client" package nil nil [2695 2722]))          
    :file "jabber-si-client.el"
    :pointmax 2775
    :fsize 2774
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-chatbuffer.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-keymap" include nil nil [872 896])
            ("jabber-point-insert" variable nil nil [898 983])
            ("jabber-send-function" variable nil nil [985 1073])
            ("jabber-chat-mode-hook" variable nil nil [1075 1258])
            ("jabber-chat-fill-long-lines" variable (:default-value t) nil [1260 1495])
            ("jabber-chat-ewoc" variable nil nil [1497 1581])
            ("jabber-chat-mode" function (:arguments ("ewoc-pp")) nil [1583 2609])
            ("put" code nil nil [2611 2655])
            ("jabber-chat-mode-flyspell-verify" function nil nil [2707 2785])
            ("put" code nil nil [2786 2870])
            ("jabber-chat-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map jabber-common-keymap) (define-key map "" (quote jabber-chat-buffer-send)) map)) nil [2872 3047])
            ("jabber-chat-buffer-send" function nil nil [3049 3410])
            ("jabber-chat-buffer-fill-long-lines" function (:user-visible-flag t) nil [3412 4144])
            ("jabber-chatbuffer" package nil nil [4146 4174]))          
    :file "jabber-chatbuffer.el"
    :pointmax 4225
    :fsize 4224
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-feature-neg.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-disco" include nil nil [949 972])
            ("cl" include nil nil [973 986])
            ("add-to-list" code nil nil [988 1070])
            ("jabber-fn-parse" function (:arguments ("xml-data" "type")) nil [1072 2327])
            ("jabber-fn-encode" function (:arguments ("alist" "type")) nil [2329 2938])
            ("jabber-fn-intersection" function (:arguments ("mine" "theirs")) nil [2940 4424])
            ("jabber-feature-neg" package nil nil [4426 4455]))          
    :file "jabber-feature-neg.el"
    :pointmax 4508
    :fsize 4507
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-menu.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-menu" variable (:default-value (make-sparse-keymap "jabber-menu")) nil [927 982])
            ("jabber-menu" function
               (:user-visible-flag t
                :arguments ("&optional" "remove"))
                nil [984 1215])
            ("define-key" code nil nil [1217 1297])
            ("define-key" code nil nil [1299 1388])
            ("define-key" code nil nil [1390 1496])
            ("define-key" code nil nil [1498 1584])
            ("define-key" code nil nil [1586 1657])
            ("define-key" code nil nil [1659 1762])
            ("jabber-define-status-key" function (:arguments ("title" "show")) nil [1764 2357])
            ("jabber-define-status-key" code nil nil [2510 2552])
            ("jabber-define-status-key" code nil nil [2646 2695])
            ("define-key" code nil nil [2696 2814])
            ("define-key" code nil nil [2815 2928])
            ("define-key" code nil nil [2929 3049])
            ("jabber-jid-chat-menu" variable nil nil [3051 3113])
            ("jabber-jid-info-menu" variable nil nil [3115 3176])
            ("jabber-jid-roster-menu" variable nil nil [3178 3244])
            ("jabber-jid-muc-menu" variable nil nil [3246 3306])
            ("jabber-jid-service-menu" variable nil nil [3308 3376])
            ("jabber-popup-menu" function (:arguments ("which-menu")) nil [3378 3671])
            ("jabber-popup-chat-menu" function (:user-visible-flag t) nil [3673 3785])
            ("jabber-popup-info-menu" function (:user-visible-flag t) nil [3787 3899])
            ("jabber-popup-roster-menu" function (:user-visible-flag t) nil [3901 4019])
            ("jabber-popup-muc-menu" function (:user-visible-flag t) nil [4021 4130])
            ("jabber-popup-service-menu" function (:user-visible-flag t) nil [4132 4253])
            ("jabber-popup-combined-menu" function (:user-visible-flag t) nil [4255 4448])
            ("jabber-menu" package nil nil [4450 4472]))          
    :file "jabber-menu.el"
    :pointmax 4525
    :fsize 4524
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-ahc.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-disco" include nil nil [937 960])
            ("jabber-widget" include nil nil [961 985])
            ("jabber-ahc-sessionid" variable nil nil [987 1061])
            ("jabber-ahc-node" variable nil nil [1063 1120])
            ("jabber-ahc-commands" variable nil nil [1122 1640])
            ("add-to-list" code nil nil [1654 2061])
            ("jabber-ahc-add" function (:arguments ("node" "name" "func" "acl")) nil [2063 2939])
            ("add-to-list" code nil nil [2941 3020])
            ("add-to-list" code nil nil [3021 3141])
            ("jabber-ahc-disco-items" function (:arguments ("xml-data")) nil [3142 3759])
            ("add-to-list" code nil nil [3761 3872])
            ("jabber-ahc-process" function (:arguments ("xml-data")) nil [3873 4579])
            ("add-to-list" code nil nil [4592 4687])
            ("jabber-ahc-get-list" function
               (:user-visible-flag t
                :arguments ("to"))
                nil [4688 4919])
            ("add-to-list" code nil nil [4921 5018])
            ("jabber-ahc-execute-command" function
               (:user-visible-flag t
                :arguments ("to" "node"))
                nil [5019 5473])
            ("jabber-ahc-display" function (:arguments ("xml-data")) nil [5475 7688])
            ("jabber-ahc-submit" function (:arguments ("action")) nil [7690 8198])
            ("jabber-ahc" package nil nil [8200 8221]))          
    :file "jabber-ahc.el"
    :pointmax 8274
    :fsize 8273
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-socks5.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-iq" include nil nil [943 963])
            ("jabber-disco" include nil nil [964 987])
            ("jabber-si-server" include nil nil [988 1015])
            ("jabber-si-client" include nil nil [1016 1043])
            ("jabber-newdisco" include nil nil [1044 1070])
            ("fsm" include nil nil [1072 1086])
            ("cl" include nil nil [1106 1119])
            ("jabber-socks5-pending-sessions" variable nil nil [1122 1306])
            ("jabber-socks5-active-sessions" variable nil nil [1308 1499])
            ("jabber-socks5-proxies" variable nil nil [1501 1700])
            ("jabber-socks5-proxies-data" variable nil nil [1702 1882])
            ("add-to-list" code nil nil [1884 1966])
            ("add-to-list" code nil nil [1968 2117])
            ("jabber-socks5-set-proxies" function (:arguments ("symbol" "value")) nil [2119 2371])
            ("jabber-socks5-query-all-proxies" function
               (:user-visible-flag t
                :arguments ("&optional" "callback"))
                nil [2373 2734])
            ("jabber-socks5-query-proxy" function (:arguments ("jid" "&optional" "callback")) nil [2736 3081])
            ("jabber-socks5-process-proxy-response" function (:arguments ("xml-data" "closure-data")) nil [3083 4026])
            ("define-state-machine" code nil nil [4028 4928])
            ("jabber-socks5-accept" function (:arguments ("jid" "sid" "profile-function")) nil [4930 5247])
            ("define-enter-state" code nil nil [5249 5558])
            ("define-state" code nil nil [5560 7509])
            ("define-enter-state" code nil nil [7511 7715])
            ("define-state" code nil nil [7717 8168])
            ("define-enter-state" code nil nil [8170 9695])
            ("add-to-list" code nil nil [9697 9814])
            ("jabber-socks5-process" function (:arguments ("xml-data")) nil [9815 11745])
            ("define-state" code nil nil [11747 13948])
            ("define-state-machine" code nil nil [13950 15383])
            ("define-state" code nil nil [15385 15757])
            ("define-enter-state" code nil nil [15759 16054])
            ("define-state" code nil nil [16056 16618])
            ("define-enter-state" code nil nil [16620 17079])
            ("define-state" code nil nil [17081 17689])
            ("define-state" code nil nil [17698 17822])
            ("define-enter-state" code nil nil [17824 18013])
            ("define-state" code nil nil [18015 18139])
            ("define-state" code nil nil [18141 19670])
            ("define-state" code nil nil [19672 20224])
            ("define-enter-state" code nil nil [20226 20991])
            ("define-state" code nil nil [21001 22306])
            ("define-enter-state" code nil nil [22308 22767])
            ("jabber-socks5-client-1" function (:arguments ("jid" "sid" "profile-function")) nil [22769 23044])
            ("jabber-socks5" package nil nil [24854 24878]))          
    :file "jabber-socks5.el"
    :pointmax 24931
    :fsize 24930
    :lastmodtime '(19097 15516)
    :unmatched-syntax '((close-paren 1119 . 1120) (symbol 1088 . 1105) (open-paren 1087 . 1088))
    )
   (semanticdb-table "jabber-browse.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-iq" include nil nil [940 960])
            ("jabber-xml" include nil nil [961 982])
            ("jabber-util" include nil nil [983 1005])
            ("add-to-list" code nil nil [1076 1163])
            ("jabber-get-browse" function
               (:user-visible-flag t
                :arguments ("to"))
                nil [1164 1515])
            ("jabber-process-browse" function (:arguments ("xml-data")) nil [1552 3637])
            ("jabber-browse" package nil nil [3639 3663]))          
    :file "jabber-browse.el"
    :pointmax 3716
    :fsize 3715
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-avatar.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl" include nil nil [1348 1361])
            ("jabber-avatar" customgroup (:user-visible-flag t) nil [1380 1453])
            ("jabber-avatar-cache-directory" variable (:default-value "~/.jabber-avatars/") nil [1455 1600])
            ("avatar" type
               (:members ("sha1-sum" "mime-type" "url" "base64-data" "height" "width" "bytes")
                :type "struct")
                nil [1629 1701])
            ("jabber-avatar-from-url" function (:arguments ("url")) nil [1703 2256])
            ("jabber-avatar-from-file" function (:arguments ("filename")) nil [2258 2633])
            ("jabber-avatar-from-base64-string" function (:arguments ("base64-string" "&optional" "mime-type")) nil [2635 2887])
            ("jabber-avatar-from-data" function (:arguments ("raw-data" "base64-string" "&optional" "mime-type")) nil [2889 3622])
            ("jabber-avatar-image" function (:arguments ("avatar")) nil [4099 4410])
            ("jabber-avatar-compute-size" function (:arguments ("avatar")) nil [4412 4933])
            ("jabber-avatar-find-cached" function (:arguments ("sha1-sum")) nil [4954 5297])
            ("jabber-avatar-cache" function (:arguments ("avatar")) nil [5299 6257])
            ("jabber-avatar-set" function (:arguments ("jid" "avatar")) nil [6288 7201])
            ("jabber-avatar" package nil nil [7203 7227]))          
    :file "jabber-avatar.el"
    :pointmax 7278
    :fsize 7277
    :lastmodtime '(19097 15516)
    :unmatched-syntax '((close-paren 1361 . 1362) (symbol 1330 . 1347) (open-paren 1329 . 1330))
    )
   (semanticdb-table "jabber-events.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl" include nil nil [865 878])
            ("jabber-events" customgroup (:user-visible-flag t) nil [880 964])
            ("jabber-events-request-these" variable (:default-value (quote (offline delivered displayed composing))) nil [1059 1472])
            ("jabber-events-composing-p" variable nil nil [1474 1557])
            ("make-variable-buffer-local" code nil nil [1558 1613])
            ("jabber-events-arrived" variable nil nil [1615 1911])
            ("make-variable-buffer-local" code nil nil [1912 1963])
            ("jabber-events-message" variable nil nil [1965 2051])
            ("make-variable-buffer-local" code nil nil [2052 2103])
            ("jabber-events-update-message" function nil nil [2105 2392])
            ("add-hook" code nil nil [2394 2456])
            ("jabber-events-when-sending" function (:arguments ("text" "id")) nil [2457 2660])
            ("jabber-events-confirm-delivered" variable (:default-value t) nil [2780 2911])
            ("jabber-events-confirm-displayed" variable (:default-value t) nil [2913 3043])
            ("jabber-events-confirm-composing" variable (:default-value t) nil [3045 3176])
            ("jabber-events-requested" variable nil nil [3178 3242])
            ("make-variable-buffer-local" code nil nil [3243 3296])
            ("jabber-events-last-id" variable nil nil [3298 3381])
            ("make-variable-buffer-local" code nil nil [3382 3433])
            ("jabber-events-delivery-confirmed" variable nil nil [3435 3521])
            ("make-variable-buffer-local" code nil nil [3522 3584])
            ("jabber-events-display-confirmed" variable nil nil [3586 3670])
            ("make-variable-buffer-local" code nil nil [3671 3732])
            ("jabber-events-composing-sent" variable nil nil [3734 3861])
            ("add-hook" code nil nil [3863 3941])
            ("jabber-events-confirm-display" function nil nil [3942 4179])
            ("jabber-events-confirm-display-in-window" function (:arguments ("window")) nil [4181 4728])
            ("jabber-events-after-change" function nil nil [4730 5225])
            ("add-to-list" code nil nil [5307 5383])
            ("jabber-handle-incoming-message-events" function (:arguments ("xml-data")) nil [5385 8630])
            ("jabber-events" package nil nil [8632 8656]))          
    :file "jabber-events.el"
    :pointmax 8707
    :fsize 8706
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-ratpoison.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-ratpoison-message" function (:arguments ("msg")) nil [870 1200])
            ("define-jabber-alert" code nil nil [1204 1317])
            ("jabber-ratpoison" package nil nil [1319 1346]))          
    :file "jabber-ratpoison.el"
    :pointmax 1397
    :fsize 1396
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-vcard-avatars.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-avatar" include nil nil [888 912])
            ("jabber-vcard-avatars-retrieve" variable (:default-value (and (fboundp (quote display-images-p)) (display-images-p))) nil [914 1102])
            ("jabber-vcard-avatars-publish" variable (:default-value t) nil [1104 1227])
            ("jabber-vcard-avatars-current-hash" variable nil nil [1229 1337])
            ("add-to-list" code nil nil [1339 1406])
            ("jabber-vcard-avatars-presence" function (:arguments ("xml-data")) nil [1407 2134])
            ("jabber-vcard-avatars-vcard" function (:arguments ("iq" "from")) nil [2136 2513])
            ("jabber-vcard-avatars-fetch" function
               (:user-visible-flag t
                :arguments ("who"))
                nil [2515 2796])
            ("add-hook" code nil nil [2798 2869])
            ("jabber-vcard-avatars-find-current" function nil nil [2870 3162])
            ("jabber-vcard-avatars-find-current-1" function (:arguments ("xml-data" "success")) nil [3164 3506])
            ("jabber-vcard-avatars-update-current" function (:arguments ("new-hash")) nil [3508 3761])
            ("jabber-vcard-avatars-send-presence" function nil nil [3763 3905])
            ("add-to-list" code nil nil [3907 3994])
            ("jabber-vcard-avatars-presence-element" function nil nil [3995 4341])
            ("jabber-vcard-avatars" package nil nil [4349 4380]))          
    :file "jabber-vcard-avatars.el"
    :pointmax 4431
    :fsize 4430
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-modeline.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-presence" include nil nil [867 893])
            ("jabber-alert" include nil nil [894 917])
            ("cl" include nil nil [937 950])
            ("jabber-mode-line" customgroup (:user-visible-flag t) nil [953 1040])
            ("jabber-mode-line-compact" variable (:default-value t) nil [1042 1180])
            ("jabber-mode-line-string" variable nil nil [1182 1218])
            ("jabber-mode-line-presence" variable nil nil [1219 1257])
            ("jabber-mode-line-contacts" variable nil nil [1258 1296])
            ("jabber-send-presence" function (:arguments ("after" "jsp-update-mode-line" "show")) nil [1298 1430])
            ("jabber-mode-line-presence-update" function nil nil [1432 1657])
            ("jabber-mode-line-count-contacts" function (:arguments ("&rest" "ignore")) nil [1659 2350])
            ("define-minor-mode" code nil nil [2352 3209])
            ("jabber-modeline" package nil nil [3211 3237]))          
    :file "jabber-modeline.el"
    :pointmax 3290
    :fsize 3289
    :lastmodtime '(19097 15516)
    :unmatched-syntax '((close-paren 950 . 951) (symbol 919 . 936) (open-paren 918 . 919))
    )
   (semanticdb-table "fsm.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl" include nil nil [2376 2389])
            ("fsm-debug" variable (:default-value "*fsm-debug*") nil [2392 2504])
            ("fsm-debug-output" function (:arguments ("format" "&rest" "args")) nil [2506 2839])
            ("defmacro*" code nil nil [2841 4358])
            ("defmacro*" code nil nil [4360 5602])
            ("defmacro*" code nil nil [5604 6335])
            ("fsm-start-timer" function (:arguments ("fsm" "secs")) nil [6337 6694])
            ("fsm-stop-timer" function (:arguments ("fsm")) nil [6696 6922])
            ("fsm-maybe-change-timer" function (:arguments ("fsm" "timeout")) nil [6924 7167])
            ("fsm-send" function (:arguments ("fsm" "event" "&optional" "callback")) nil [7169 7420])
            ("fsm-update" function (:arguments ("fsm" "new-state" "new-state-data" "timeout")) nil [7422 8394])
            ("fsm-send-sync" function (:arguments ("fsm" "event" "&optional" "callback")) nil [8396 9750])
            ("fsm-call" function (:arguments ("fsm" "event")) nil [9752 10043])
            ("fsm-make-filter" function (:arguments ("fsm")) nil [10045 10297])
            ("fsm-make-sentinel" function (:arguments ("fsm")) nil [10299 10561])
            ("fsm-sleep" function (:arguments ("fsm" "secs")) nil [10563 10706])
            ("fsm" package nil nil [10708 10722]))          
    :file "fsm.el"
    :pointmax 10744
    :fsize 10743
    :lastmodtime '(19097 15516)
    :unmatched-syntax '((close-paren 2389 . 2390) (symbol 2358 . 2375) (open-paren 2357 . 2358))
    )
   (semanticdb-table "jabber-xmessage.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-xmessage-display-message" function (:arguments ("message")) nil [857 1049])
            ("define-jabber-alert" code nil nil [1051 1164])
            ("jabber-xmessage" package nil nil [1166 1192]))          
    :file "jabber-xmessage.el"
    :pointmax 1243
    :fsize 1242
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-autoaway.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl" include nil nil [886 899])
            ("time-date" include nil nil [901 921])
            ("jabber-autoaway" customgroup (:user-visible-flag t) nil [923 1011])
            ("jabber-autoaway-method" variable (:default-value (cond ((fboundp (quote current-idle-time)) (quote jabber-current-idle-time)) ((getenv "DISPLAY") (quote jabber-xprintidle-get-idle-time)) ((null window-system) (quote jabber-termatime-get-idle-time)))) nil [1013 1730])
            ("jabber-autoaway-timeout" variable (:default-value 5) nil [1732 1868])
            ("jabber-autoaway-status" variable (:default-value "Idle") nil [1870 1984])
            ("jabber-autoaway-priority" variable nil nil [1986 2278])
            ("jabber-xprintidle-program" variable (:default-value (executable-find "xprintidle")) nil [2280 2425])
            ("jabber-autoaway-verbose" variable nil nil [2427 2559])
            ("jabber-autoaway-timer" variable nil nil [2561 2595])
            ("jabber-autoaway-last-idle-time" variable nil nil [2597 2750])
            ("jabber-autoaway-message" function (:arguments ("&rest" "args")) nil [2752 2856])
            ("jabber-autoaway-start" function (:user-visible-flag t) nil [2858 3172])
            ("jabber-autoaway-stop" function (:user-visible-flag t) nil [3174 3417])
            ("jabber-autoaway-get-idle-time" function nil nil [3419 3602])
            ("jabber-autoaway-timer" function nil nil [3604 4151])
            ("jabber-autoaway-set-idle" function nil nil [4153 4704])
            ("jabber-autoaway-maybe-unidle" function nil nil [4706 5281])
            ("jabber-xprintidle-get-idle-time" function nil nil [5283 5553])
            ("jabber-termatime-get-idle-time" function nil nil [5555 5983])
            ("jabber-current-idle-time" function nil nil [5985 6215])
            ("jabber-autoaway" package nil nil [6217 6243]))          
    :file "jabber-autoaway.el"
    :pointmax 6294
    :fsize 6293
    :lastmodtime '(19097 15516)
    :unmatched-syntax '((close-paren 899 . 900) (symbol 868 . 885) (open-paren 867 . 868))
    )
   (semanticdb-table "jabber-version.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-iq" include nil nil [943 963])
            ("jabber-util" include nil nil [964 986])
            ("jabber-version" variable
               (:constant-flag t
                :default-value "0.7.1")
                nil [988 1064])
            ("add-to-list" code nil nil [1066 1161])
            ("jabber-get-version" function
               (:user-visible-flag t
                :arguments ("to"))
                nil [1162 1572])
            ("jabber-process-version" function (:arguments ("xml-data")) nil [1607 1974])
            ("add-to-list" code nil nil [1976 2066])
            ("add-to-list" code nil nil [2067 2128])
            ("jabber-return-version" function (:arguments ("xml-data")) nil [2129 2893])
            ("jabber-version" package nil nil [2895 2920]))          
    :file "jabber-version.el"
    :pointmax 2973
    :fsize 2972
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-festival.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("condition-case" code nil nil [845 1074])
            ("jabber-festival" package nil nil [1076 1102]))          
    :file "jabber-festival.el"
    :pointmax 1155
    :fsize 1154
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-activity.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-core" include nil nil [1659 1681])
            ("jabber-alert" include nil nil [1682 1705])
            ("jabber-util" include nil nil [1706 1728])
            ("cl" include nil nil [1729 1742])
            ("jabber-activity" customgroup (:user-visible-flag t) nil [1744 1821])
            ("jabber-activity-make-string" variable (:default-value (quote jabber-activity-make-string-default)) nil [1823 2260])
            ("jabber-activity-shorten-minimum" variable (:default-value 1) nil [2262 2459])
            ("jabber-activity-make-strings" variable (:default-value (quote jabber-activity-make-strings-default)) nil [2461 3075])
            ("jabber-activity-count-in-title" variable nil nil [3077 3403])
            ("jabber-activity-count-in-title-format" variable (:default-value (quote (jabber-activity-jids ("[" jabber-activity-count-string "] ")))) nil [3405 3877])
            ("jabber-activity-show-p" variable (:default-value (quote jabber-activity-show-p-default)) nil [3879 4087])
            ("jabber-activity-query-unread" variable (:default-value t) nil [4089 4303])
            ("jabber-activity-face" variable
               (:default-value (quote ((t (:foreground "red" :weight bold))))
                :type "face")
                nil [4305 4471])
            ("jabber-activity-jids" variable nil nil [4473 4552])
            ("jabber-activity-name-alist" variable nil nil [4554 4636])
            ("jabber-activity-mode-string" variable nil nil [4638 4717])
            ("jabber-activity-count-string" variable (:default-value "0") nil [4719 4799])
            ("jabber-activity-update-hook" variable nil nil [4801 4991])
            ("put" code nil nil [5057 5115])
            ("put" code nil nil [5116 5175])
            ("jabber-activity-make-string-default" function (:arguments ("jid")) nil [5177 5629])
            ("jabber-activity-make-strings-default" function (:arguments ("jids")) nil [5631 5819])
            ("jabber-activity-common-prefix" function (:arguments ("s1" "s2")) nil [5821 6109])
            ("jabber-activity-make-strings-shorten" function (:arguments ("jids")) nil [6111 6912])
            ("jabber-activity-find-buffer-name" function (:arguments ("jid")) nil [6914 7264])
            ("jabber-activity-show-p-default" function (:arguments ("jid")) nil [7266 7504])
            ("jabber-activity-make-name-alist" function nil nil [7506 7811])
            ("jabber-activity-lookup-name" function (:arguments ("jid")) nil [7813 8291])
            ("jabber-activity-mode-line-update" function nil nil [8293 9319])
            ("jabber-activity-clean" function nil nil [9332 9565])
            ("jabber-activity-add" function (:arguments ("from" "buffer" "text" "proposed-alert")) nil [9567 9974])
            ("jabber-activity-add-muc" function (:arguments ("nick" "group" "buffer" "text" "proposed-alert")) nil [9976 10237])
            ("jabber-activity-kill-hook" function nil nil [10239 10609])
            ("jabber-activity-switch-to" function
               (:user-visible-flag t
                :arguments ("&optional" "jid-param"))
                nil [10638 11181])
            ("define-minor-mode" code nil nil [11198 13563])
            ("if" code nil nil [13639 13689])
            ("jabber-activity" package nil nil [13691 13717]))          
    :file "jabber-activity.el"
    :pointmax 13769
    :fsize 13768
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-watch.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-util" include nil nil [911 933])
            ("jabber-watch-alist" variable nil nil [935 1250])
            ("jabber-presence-watch" function (:arguments ("who" "oldstatus" "newstatus" "statustext" "proposed-alert")) nil [1252 2164])
            ("jabber-watch-add" function (:arguments ("buddy" "&optional" "comment")) nil [2166 2596])
            ("jabber-watch-remove" function (:arguments ("buddy")) nil [2598 2936])
            ("jabber-watch" package nil nil [2938 2961]))          
    :file "jabber-watch.el"
    :pointmax 3013
    :fsize 3012
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-si-server.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-iq" include nil nil [960 980])
            ("jabber-disco" include nil nil [981 1004])
            ("jabber-feature-neg" include nil nil [1005 1034])
            ("jabber-si-common" include nil nil [1036 1063])
            ("add-to-list" code nil nil [1065 1138])
            ("jabber-si-profiles" variable nil nil [1250 1629])
            ("add-to-list" code nil nil [1631 1735])
            ("jabber-si-process" function (:arguments ("xml-data")) nil [1736 3728])
            ("jabber-si-server" package nil nil [3730 3757]))          
    :file "jabber-si-server.el"
    :pointmax 3810
    :fsize 3809
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jabber-ft-common.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("jabber-ft-md5sum-program" variable (:default-value (or (when (executable-find "md5") (list (executable-find "md5") "-n")) (when (executable-find "md5sum") (list (executable-find "md5sum"))))) nil [891 1227])
            ("jabber-ft-get-md5" function (:arguments ("file-name")) nil [1229 1697])
            ("jabber-ft-common" package nil nil [1699 1726]))          
    :file "jabber-ft-common.el"
    :pointmax 1777
    :fsize 1776
    :lastmodtime '(19097 15516)
    :unmatched-syntax 'nil
    )
   )
  :file "!usr!share!emacs!site-lisp!emacs-jabber!semantic.cache"
  :semantic-tag-version "2.0pre6"
  :semanticdb-version "2.0pre6"
  )
